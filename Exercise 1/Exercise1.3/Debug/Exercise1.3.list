
Exercise1.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000320  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004b4  080004bc  000104bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004b4  080004b4  000104bc  2**0
                  CONTENTS
  4 .ARM          00000000  080004b4  080004b4  000104bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004b4  080004bc  000104bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004b4  080004b4  000104b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004b8  080004b8  000104b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000104bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000104bc  2**0
                  CONTENTS
 10 .bss          0000002c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000002c  2000002c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000104bc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000104ec  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000b16  00000000  00000000  0001052f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000002e7  00000000  00000000  00011045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000000b8  00000000  00000000  00011330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000007c  00000000  00000000  000113e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00014ed5  00000000  00000000  00011464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00000c22  00000000  00000000  00026339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0007291c  00000000  00000000  00026f5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000001f0  00000000  00000000  00099878  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00099a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800049c 	.word	0x0800049c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	0800049c 	.word	0x0800049c

080001d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	db0b      	blt.n	80001fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f003 021f 	and.w	r2, r3, #31
 80001ec:	4907      	ldr	r1, [pc, #28]	; (800020c <__NVIC_EnableIRQ+0x38>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	095b      	lsrs	r3, r3, #5
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e100 	.word	0xe000e100

08000210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	6039      	str	r1, [r7, #0]
 800021a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800021c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000220:	2b00      	cmp	r3, #0
 8000222:	db0a      	blt.n	800023a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	b2da      	uxtb	r2, r3
 8000228:	490c      	ldr	r1, [pc, #48]	; (800025c <__NVIC_SetPriority+0x4c>)
 800022a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022e:	0112      	lsls	r2, r2, #4
 8000230:	b2d2      	uxtb	r2, r2
 8000232:	440b      	add	r3, r1
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000238:	e00a      	b.n	8000250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	b2da      	uxtb	r2, r3
 800023e:	4908      	ldr	r1, [pc, #32]	; (8000260 <__NVIC_SetPriority+0x50>)
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	f003 030f 	and.w	r3, r3, #15
 8000246:	3b04      	subs	r3, #4
 8000248:	0112      	lsls	r2, r2, #4
 800024a:	b2d2      	uxtb	r2, r2
 800024c:	440b      	add	r3, r1
 800024e:	761a      	strb	r2, [r3, #24]
}
 8000250:	bf00      	nop
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr
 800025c:	e000e100 	.word	0xe000e100
 8000260:	e000ed00 	.word	0xe000ed00

08000264 <EXTI0_IRQHandler>:
// Array to store LED states
static uint8_t led_states[8] = {0};

void (*button_handler)() = 0x00;

void EXTI0_IRQHandler(void) {
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
    if (button_handler != 0x00) {
 8000268:	4b07      	ldr	r3, [pc, #28]	; (8000288 <EXTI0_IRQHandler+0x24>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	2b00      	cmp	r3, #0
 800026e:	d002      	beq.n	8000276 <EXTI0_IRQHandler+0x12>
        button_handler();
 8000270:	4b05      	ldr	r3, [pc, #20]	; (8000288 <EXTI0_IRQHandler+0x24>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4798      	blx	r3
    }
    EXTI->PR |= EXTI_PR_PR0; // Reset interrupt
 8000276:	4b05      	ldr	r3, [pc, #20]	; (800028c <EXTI0_IRQHandler+0x28>)
 8000278:	695b      	ldr	r3, [r3, #20]
 800027a:	4a04      	ldr	r2, [pc, #16]	; (800028c <EXTI0_IRQHandler+0x28>)
 800027c:	f043 0301 	orr.w	r3, r3, #1
 8000280:	6153      	str	r3, [r2, #20]
}
 8000282:	bf00      	nop
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	20000024 	.word	0x20000024
 800028c:	40010400 	.word	0x40010400

08000290 <digital_io_init>:

void digital_io_init() {
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
    // Enable clocks for GPIOA and GPIOE
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOEEN;
 8000294:	4b1a      	ldr	r3, [pc, #104]	; (8000300 <digital_io_init+0x70>)
 8000296:	695b      	ldr	r3, [r3, #20]
 8000298:	4a19      	ldr	r2, [pc, #100]	; (8000300 <digital_io_init+0x70>)
 800029a:	f443 1308 	orr.w	r3, r3, #2228224	; 0x220000
 800029e:	6153      	str	r3, [r2, #20]

    // Initialize LED pins (PE8-PE15) as outputs
    GPIOE->MODER |= 0x55550000; // Set PE8-PE15 to general purpose output mode
 80002a0:	4b18      	ldr	r3, [pc, #96]	; (8000304 <digital_io_init+0x74>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a17      	ldr	r2, [pc, #92]	; (8000304 <digital_io_init+0x74>)
 80002a6:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 80002aa:	f443 03aa 	orr.w	r3, r3, #5570560	; 0x550000
 80002ae:	6013      	str	r3, [r2, #0]

    // Initialize button pin (PA0) as input
    GPIOA->MODER &= ~(GPIO_MODER_MODER0); // Set PA0 to input mode
 80002b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002ba:	f023 0303 	bic.w	r3, r3, #3
 80002be:	6013      	str	r3, [r2, #0]

    // Enable SYSCFG clock
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80002c0:	4b0f      	ldr	r3, [pc, #60]	; (8000300 <digital_io_init+0x70>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	4a0e      	ldr	r2, [pc, #56]	; (8000300 <digital_io_init+0x70>)
 80002c6:	f043 0301 	orr.w	r3, r3, #1
 80002ca:	6193      	str	r3, [r2, #24]

    // Connect EXTI0 line to PA0
    SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA;
 80002cc:	4b0e      	ldr	r3, [pc, #56]	; (8000308 <digital_io_init+0x78>)
 80002ce:	4a0e      	ldr	r2, [pc, #56]	; (8000308 <digital_io_init+0x78>)
 80002d0:	689b      	ldr	r3, [r3, #8]
 80002d2:	6093      	str	r3, [r2, #8]

    // Configure EXTI0 line to trigger on rising edge
    EXTI->RTSR |= EXTI_RTSR_TR0;
 80002d4:	4b0d      	ldr	r3, [pc, #52]	; (800030c <digital_io_init+0x7c>)
 80002d6:	689b      	ldr	r3, [r3, #8]
 80002d8:	4a0c      	ldr	r2, [pc, #48]	; (800030c <digital_io_init+0x7c>)
 80002da:	f043 0301 	orr.w	r3, r3, #1
 80002de:	6093      	str	r3, [r2, #8]

    // Unmask EXTI0 line
    EXTI->IMR |= EXTI_IMR_MR0;
 80002e0:	4b0a      	ldr	r3, [pc, #40]	; (800030c <digital_io_init+0x7c>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a09      	ldr	r2, [pc, #36]	; (800030c <digital_io_init+0x7c>)
 80002e6:	f043 0301 	orr.w	r3, r3, #1
 80002ea:	6013      	str	r3, [r2, #0]

    // Set interrupt priority and enable EXTI0 interrupt
    NVIC_SetPriority(EXTI0_IRQn, 0);
 80002ec:	2100      	movs	r1, #0
 80002ee:	2006      	movs	r0, #6
 80002f0:	f7ff ff8e 	bl	8000210 <__NVIC_SetPriority>
    NVIC_EnableIRQ(EXTI0_IRQn);
 80002f4:	2006      	movs	r0, #6
 80002f6:	f7ff ff6d 	bl	80001d4 <__NVIC_EnableIRQ>
}
 80002fa:	bf00      	nop
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	40021000 	.word	0x40021000
 8000304:	48001000 	.word	0x48001000
 8000308:	40010000 	.word	0x40010000
 800030c:	40010400 	.word	0x40010400

08000310 <set_led>:

void set_led(uint8_t led_num) {
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	4603      	mov	r3, r0
 8000318:	71fb      	strb	r3, [r7, #7]
    GPIOE->BSRR = (1 << (led_num + 8)); // Set corresponding bit to turn on LED
 800031a:	79fb      	ldrb	r3, [r7, #7]
 800031c:	3308      	adds	r3, #8
 800031e:	2201      	movs	r2, #1
 8000320:	409a      	lsls	r2, r3
 8000322:	4b05      	ldr	r3, [pc, #20]	; (8000338 <set_led+0x28>)
 8000324:	619a      	str	r2, [r3, #24]
    set_led_state(led_num, 1); // Update LED state
 8000326:	79fb      	ldrb	r3, [r7, #7]
 8000328:	2101      	movs	r1, #1
 800032a:	4618      	mov	r0, r3
 800032c:	f000 f81c 	bl	8000368 <set_led_state>
}
 8000330:	bf00      	nop
 8000332:	3708      	adds	r7, #8
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	48001000 	.word	0x48001000

0800033c <clear_led>:

void clear_led(uint8_t led_num) {
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
 8000342:	4603      	mov	r3, r0
 8000344:	71fb      	strb	r3, [r7, #7]
    GPIOE->BSRR = (1 << (led_num + 8 + 16)); // Set corresponding bit to turn off LED
 8000346:	79fb      	ldrb	r3, [r7, #7]
 8000348:	3318      	adds	r3, #24
 800034a:	2201      	movs	r2, #1
 800034c:	409a      	lsls	r2, r3
 800034e:	4b05      	ldr	r3, [pc, #20]	; (8000364 <clear_led+0x28>)
 8000350:	619a      	str	r2, [r3, #24]
    set_led_state(led_num, 0); // Update LED state
 8000352:	79fb      	ldrb	r3, [r7, #7]
 8000354:	2100      	movs	r1, #0
 8000356:	4618      	mov	r0, r3
 8000358:	f000 f806 	bl	8000368 <set_led_state>
}
 800035c:	bf00      	nop
 800035e:	3708      	adds	r7, #8
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	48001000 	.word	0x48001000

08000368 <set_led_state>:

uint8_t get_led_state(uint8_t led_num) {
    return led_states[led_num];
}

void set_led_state(uint8_t led_num, uint8_t state) {
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
 800036e:	4603      	mov	r3, r0
 8000370:	460a      	mov	r2, r1
 8000372:	71fb      	strb	r3, [r7, #7]
 8000374:	4613      	mov	r3, r2
 8000376:	71bb      	strb	r3, [r7, #6]
    led_states[led_num] = state;
 8000378:	79fb      	ldrb	r3, [r7, #7]
 800037a:	4904      	ldr	r1, [pc, #16]	; (800038c <set_led_state+0x24>)
 800037c:	79ba      	ldrb	r2, [r7, #6]
 800037e:	54ca      	strb	r2, [r1, r3]
}
 8000380:	bf00      	nop
 8000382:	370c      	adds	r7, #12
 8000384:	46bd      	mov	sp, r7
 8000386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038a:	4770      	bx	lr
 800038c:	2000001c 	.word	0x2000001c

08000390 <set_button_handler>:

void set_button_handler(void (*handler)()) {
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
    button_handler = handler;
 8000398:	4a04      	ldr	r2, [pc, #16]	; (80003ac <set_button_handler+0x1c>)
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	6013      	str	r3, [r2, #0]
}
 800039e:	bf00      	nop
 80003a0:	370c      	adds	r7, #12
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	20000024 	.word	0x20000024

080003b0 <chase_led>:
#include "stm32f303xc.h"
#include "digital_io.h"

void chase_led() {
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
    static uint8_t led_index = 0;
    clear_led(led_index);       // Clear the currently lit LED
 80003b4:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <chase_led+0x38>)
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	4618      	mov	r0, r3
 80003ba:	f7ff ffbf 	bl	800033c <clear_led>
    led_index = (led_index + 1) % 8;  // Move to the next LED
 80003be:	4b0a      	ldr	r3, [pc, #40]	; (80003e8 <chase_led+0x38>)
 80003c0:	781b      	ldrb	r3, [r3, #0]
 80003c2:	3301      	adds	r3, #1
 80003c4:	425a      	negs	r2, r3
 80003c6:	f003 0307 	and.w	r3, r3, #7
 80003ca:	f002 0207 	and.w	r2, r2, #7
 80003ce:	bf58      	it	pl
 80003d0:	4253      	negpl	r3, r2
 80003d2:	b2da      	uxtb	r2, r3
 80003d4:	4b04      	ldr	r3, [pc, #16]	; (80003e8 <chase_led+0x38>)
 80003d6:	701a      	strb	r2, [r3, #0]
    set_led(led_index);         // Set the next LED
 80003d8:	4b03      	ldr	r3, [pc, #12]	; (80003e8 <chase_led+0x38>)
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	4618      	mov	r0, r3
 80003de:	f7ff ff97 	bl	8000310 <set_led>
}
 80003e2:	bf00      	nop
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	20000028 	.word	0x20000028

080003ec <main>:

int main(void) {
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
    digital_io_init();          // Initialize digital I/O module
 80003f0:	f7ff ff4e 	bl	8000290 <digital_io_init>
    set_button_handler(&chase_led);  // Set button handler function
 80003f4:	4801      	ldr	r0, [pc, #4]	; (80003fc <main+0x10>)
 80003f6:	f7ff ffcb 	bl	8000390 <set_button_handler>

    while (1) {
 80003fa:	e7fe      	b.n	80003fa <main+0xe>
 80003fc:	080003b1 	.word	0x080003b1

08000400 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000400:	480d      	ldr	r0, [pc, #52]	; (8000438 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000402:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000404:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000408:	480c      	ldr	r0, [pc, #48]	; (800043c <LoopForever+0x6>)
  ldr r1, =_edata
 800040a:	490d      	ldr	r1, [pc, #52]	; (8000440 <LoopForever+0xa>)
  ldr r2, =_sidata
 800040c:	4a0d      	ldr	r2, [pc, #52]	; (8000444 <LoopForever+0xe>)
  movs r3, #0
 800040e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000410:	e002      	b.n	8000418 <LoopCopyDataInit>

08000412 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000412:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000414:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000416:	3304      	adds	r3, #4

08000418 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000418:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800041a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800041c:	d3f9      	bcc.n	8000412 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800041e:	4a0a      	ldr	r2, [pc, #40]	; (8000448 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000420:	4c0a      	ldr	r4, [pc, #40]	; (800044c <LoopForever+0x16>)
  movs r3, #0
 8000422:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000424:	e001      	b.n	800042a <LoopFillZerobss>

08000426 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000426:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000428:	3204      	adds	r2, #4

0800042a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800042a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800042c:	d3fb      	bcc.n	8000426 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800042e:	f000 f811 	bl	8000454 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000432:	f7ff ffdb 	bl	80003ec <main>

08000436 <LoopForever>:

LoopForever:
  b LoopForever
 8000436:	e7fe      	b.n	8000436 <LoopForever>
  ldr   r0, =_estack
 8000438:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800043c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000440:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000444:	080004bc 	.word	0x080004bc
  ldr r2, =_sbss
 8000448:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800044c:	2000002c 	.word	0x2000002c

08000450 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000450:	e7fe      	b.n	8000450 <ADC1_2_IRQHandler>
	...

08000454 <__libc_init_array>:
 8000454:	b570      	push	{r4, r5, r6, lr}
 8000456:	4d0d      	ldr	r5, [pc, #52]	; (800048c <__libc_init_array+0x38>)
 8000458:	4c0d      	ldr	r4, [pc, #52]	; (8000490 <__libc_init_array+0x3c>)
 800045a:	1b64      	subs	r4, r4, r5
 800045c:	10a4      	asrs	r4, r4, #2
 800045e:	2600      	movs	r6, #0
 8000460:	42a6      	cmp	r6, r4
 8000462:	d109      	bne.n	8000478 <__libc_init_array+0x24>
 8000464:	4d0b      	ldr	r5, [pc, #44]	; (8000494 <__libc_init_array+0x40>)
 8000466:	4c0c      	ldr	r4, [pc, #48]	; (8000498 <__libc_init_array+0x44>)
 8000468:	f000 f818 	bl	800049c <_init>
 800046c:	1b64      	subs	r4, r4, r5
 800046e:	10a4      	asrs	r4, r4, #2
 8000470:	2600      	movs	r6, #0
 8000472:	42a6      	cmp	r6, r4
 8000474:	d105      	bne.n	8000482 <__libc_init_array+0x2e>
 8000476:	bd70      	pop	{r4, r5, r6, pc}
 8000478:	f855 3b04 	ldr.w	r3, [r5], #4
 800047c:	4798      	blx	r3
 800047e:	3601      	adds	r6, #1
 8000480:	e7ee      	b.n	8000460 <__libc_init_array+0xc>
 8000482:	f855 3b04 	ldr.w	r3, [r5], #4
 8000486:	4798      	blx	r3
 8000488:	3601      	adds	r6, #1
 800048a:	e7f2      	b.n	8000472 <__libc_init_array+0x1e>
 800048c:	080004b4 	.word	0x080004b4
 8000490:	080004b4 	.word	0x080004b4
 8000494:	080004b4 	.word	0x080004b4
 8000498:	080004b8 	.word	0x080004b8

0800049c <_init>:
 800049c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800049e:	bf00      	nop
 80004a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004a2:	bc08      	pop	{r3}
 80004a4:	469e      	mov	lr, r3
 80004a6:	4770      	bx	lr

080004a8 <_fini>:
 80004a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004aa:	bf00      	nop
 80004ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ae:	bc08      	pop	{r3}
 80004b0:	469e      	mov	lr, r3
 80004b2:	4770      	bx	lr
