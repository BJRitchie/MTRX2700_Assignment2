
test_exercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001530  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  080016c0  080016c0  000116c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800185c  0800185c  00020158  2**0
                  CONTENTS
  4 .ARM          00000000  0800185c  0800185c  00020158  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800185c  0800185c  00020158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800185c  0800185c  0001185c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001860  08001860  00011860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000158  20000000  08001864  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020158  2**0
                  CONTENTS
 10 .bss          00000168  20000158  20000158  00020158  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002c0  200002c0  00020158  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 14 .debug_info   00001c69  00000000  00000000  000201cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000076f  00000000  00000000  00021e34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000170  00000000  00000000  000225a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000fe  00000000  00000000  00022718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001601c  00000000  00000000  00022816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001dcc  00000000  00000000  00038832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0007656f  00000000  00000000  0003a5fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000bc0  00000000  00000000  000b0b70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  000b1730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000158 	.word	0x20000158
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080016a8 	.word	0x080016a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000015c 	.word	0x2000015c
 80001cc:	080016a8 	.word	0x080016a8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <initialise_board>:
#include "new_initialise.h"
#include "stm32f303xc.h"

// code from lecture example W05-C-interrupt by Dr Stewart Worrall
// initialise the discovery board I/O (just outputs: inputs are selected by default)
void initialise_board() {
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 80002a6:	4b06      	ldr	r3, [pc, #24]	; (80002c0 <initialise_board+0x20>)
 80002a8:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555;
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	f245 5255 	movw	r2, #21845	; 0x5555
 80002b0:	801a      	strh	r2, [r3, #0]
}
 80002b2:	bf00      	nop
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	48001002 	.word	0x48001002

080002c4 <enable_clocks>:

// code from lecture example W05-C-interrupt by Dr Stewart Worrall
// enable the clocks for desired peripherals (GPIOA, C and E)
void enable_clocks() {
 80002c4:	b480      	push	{r7}
 80002c6:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 80002c8:	4b05      	ldr	r3, [pc, #20]	; (80002e0 <enable_clocks+0x1c>)
 80002ca:	695b      	ldr	r3, [r3, #20]
 80002cc:	4a04      	ldr	r2, [pc, #16]	; (80002e0 <enable_clocks+0x1c>)
 80002ce:	f443 1328 	orr.w	r3, r3, #2752512	; 0x2a0000
 80002d2:	6153      	str	r3, [r2, #20]
}
 80002d4:	bf00      	nop
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	40021000 	.word	0x40021000

080002e4 <received_new_string>:
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void execute_command(const char* command, const char* params);

void received_new_string(uint8_t *buffer, uint32_t length) {
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b0a2      	sub	sp, #136	; 0x88
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
 80002ec:	6039      	str	r1, [r7, #0]
    char command[64] = {0};
 80002ee:	2300      	movs	r3, #0
 80002f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80002f2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80002f6:	223c      	movs	r2, #60	; 0x3c
 80002f8:	2100      	movs	r1, #0
 80002fa:	4618      	mov	r0, r3
 80002fc:	f000 fc2c 	bl	8000b58 <memset>
    char params[64] = {0};
 8000300:	2300      	movs	r3, #0
 8000302:	60bb      	str	r3, [r7, #8]
 8000304:	f107 030c 	add.w	r3, r7, #12
 8000308:	223c      	movs	r2, #60	; 0x3c
 800030a:	2100      	movs	r1, #0
 800030c:	4618      	mov	r0, r3
 800030e:	f000 fc23 	bl	8000b58 <memset>

    // Assuming buffer is null-terminated; otherwise, ensure it before calling sscanf
    sscanf((const char *)buffer, "%63s %63[^\n]", command, params);
 8000312:	f107 0308 	add.w	r3, r7, #8
 8000316:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800031a:	4908      	ldr	r1, [pc, #32]	; (800033c <received_new_string+0x58>)
 800031c:	6878      	ldr	r0, [r7, #4]
 800031e:	f000 fbed 	bl	8000afc <siscanf>

    execute_command(command, params);
 8000322:	f107 0208 	add.w	r2, r7, #8
 8000326:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800032a:	4611      	mov	r1, r2
 800032c:	4618      	mov	r0, r3
 800032e:	f000 f81f 	bl	8000370 <execute_command>
}
 8000332:	bf00      	nop
 8000334:	3788      	adds	r7, #136	; 0x88
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	080016c0 	.word	0x080016c0

08000340 <oneshot_callback>:
void one_shot(void) {
	uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
	*led_register = 0xFF;
}

void oneshot_callback(void) {
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
    SerialOutputString((uint8_t *)"One-shot timer expired.\r\n", &USART1_PORT);
 8000344:	4902      	ldr	r1, [pc, #8]	; (8000350 <oneshot_callback+0x10>)
 8000346:	4803      	ldr	r0, [pc, #12]	; (8000354 <oneshot_callback+0x14>)
 8000348:	f000 fabf 	bl	80008ca <SerialOutputString>
}
 800034c:	bf00      	nop
 800034e:	bd80      	pop	{r7, pc}
 8000350:	20000050 	.word	0x20000050
 8000354:	080016d0 	.word	0x080016d0

08000358 <timer_callback>:


void timer_callback(void) {
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
    SerialOutputString((uint8_t *)"Timer tick.\r\n", &USART1_PORT);
 800035c:	4902      	ldr	r1, [pc, #8]	; (8000368 <timer_callback+0x10>)
 800035e:	4803      	ldr	r0, [pc, #12]	; (800036c <timer_callback+0x14>)
 8000360:	f000 fab3 	bl	80008ca <SerialOutputString>
}
 8000364:	bf00      	nop
 8000366:	bd80      	pop	{r7, pc}
 8000368:	20000050 	.word	0x20000050
 800036c:	080016ec 	.word	0x080016ec

08000370 <execute_command>:

void execute_command(const char* command, const char* params) {
 8000370:	b580      	push	{r7, lr}
 8000372:	b084      	sub	sp, #16
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
 8000378:	6039      	str	r1, [r7, #0]
    if (strcmp(command, "led") == 0) {
 800037a:	4922      	ldr	r1, [pc, #136]	; (8000404 <execute_command+0x94>)
 800037c:	6878      	ldr	r0, [r7, #4]
 800037e:	f7ff ff27 	bl	80001d0 <strcmp>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d039      	beq.n	80003fc <execute_command+0x8c>
        // LED command execution logic here
    } else if (strcmp(command, "serial") == 0) {
 8000388:	491f      	ldr	r1, [pc, #124]	; (8000408 <execute_command+0x98>)
 800038a:	6878      	ldr	r0, [r7, #4]
 800038c:	f7ff ff20 	bl	80001d0 <strcmp>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d108      	bne.n	80003a8 <execute_command+0x38>
        SerialOutputString((uint8_t *)params, &USART1_PORT);
 8000396:	491d      	ldr	r1, [pc, #116]	; (800040c <execute_command+0x9c>)
 8000398:	6838      	ldr	r0, [r7, #0]
 800039a:	f000 fa96 	bl	80008ca <SerialOutputString>
        SerialOutputString((uint8_t *)"\r\n", &USART1_PORT);
 800039e:	491b      	ldr	r1, [pc, #108]	; (800040c <execute_command+0x9c>)
 80003a0:	481b      	ldr	r0, [pc, #108]	; (8000410 <execute_command+0xa0>)
 80003a2:	f000 fa92 	bl	80008ca <SerialOutputString>
        uint32_t period = strtoul(params, NULL, 10);
        set_continuous_mode(&TIM2_init, period, timer_callback);  // Ensure this function is implemented
    } else {
        SerialOutputString((uint8_t *)"Unknown command\r\n", &USART1_PORT);
    }
}
 80003a6:	e029      	b.n	80003fc <execute_command+0x8c>
    } else if (strcmp(command, "oneshot") == 0) {
 80003a8:	491a      	ldr	r1, [pc, #104]	; (8000414 <execute_command+0xa4>)
 80003aa:	6878      	ldr	r0, [r7, #4]
 80003ac:	f7ff ff10 	bl	80001d0 <strcmp>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d10b      	bne.n	80003ce <execute_command+0x5e>
        uint32_t delay = strtoul(params, NULL, 10);
 80003b6:	220a      	movs	r2, #10
 80003b8:	2100      	movs	r1, #0
 80003ba:	6838      	ldr	r0, [r7, #0]
 80003bc:	f000 fb94 	bl	8000ae8 <strtoul>
 80003c0:	60b8      	str	r0, [r7, #8]
        set_one_shot_mode(&TIM4_init, delay, oneshot_callback);
 80003c2:	4a15      	ldr	r2, [pc, #84]	; (8000418 <execute_command+0xa8>)
 80003c4:	68b9      	ldr	r1, [r7, #8]
 80003c6:	4815      	ldr	r0, [pc, #84]	; (800041c <execute_command+0xac>)
 80003c8:	f000 f98b 	bl	80006e2 <set_one_shot_mode>
}
 80003cc:	e016      	b.n	80003fc <execute_command+0x8c>
    } else if (strcmp(command, "timer") == 0) {
 80003ce:	4914      	ldr	r1, [pc, #80]	; (8000420 <execute_command+0xb0>)
 80003d0:	6878      	ldr	r0, [r7, #4]
 80003d2:	f7ff fefd 	bl	80001d0 <strcmp>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d10b      	bne.n	80003f4 <execute_command+0x84>
        uint32_t period = strtoul(params, NULL, 10);
 80003dc:	220a      	movs	r2, #10
 80003de:	2100      	movs	r1, #0
 80003e0:	6838      	ldr	r0, [r7, #0]
 80003e2:	f000 fb81 	bl	8000ae8 <strtoul>
 80003e6:	60f8      	str	r0, [r7, #12]
        set_continuous_mode(&TIM2_init, period, timer_callback);  // Ensure this function is implemented
 80003e8:	4a0e      	ldr	r2, [pc, #56]	; (8000424 <execute_command+0xb4>)
 80003ea:	68f9      	ldr	r1, [r7, #12]
 80003ec:	480e      	ldr	r0, [pc, #56]	; (8000428 <execute_command+0xb8>)
 80003ee:	f000 f98d 	bl	800070c <set_continuous_mode>
}
 80003f2:	e003      	b.n	80003fc <execute_command+0x8c>
        SerialOutputString((uint8_t *)"Unknown command\r\n", &USART1_PORT);
 80003f4:	4905      	ldr	r1, [pc, #20]	; (800040c <execute_command+0x9c>)
 80003f6:	480d      	ldr	r0, [pc, #52]	; (800042c <execute_command+0xbc>)
 80003f8:	f000 fa67 	bl	80008ca <SerialOutputString>
}
 80003fc:	bf00      	nop
 80003fe:	3710      	adds	r7, #16
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	080016fc 	.word	0x080016fc
 8000408:	08001700 	.word	0x08001700
 800040c:	20000050 	.word	0x20000050
 8000410:	08001708 	.word	0x08001708
 8000414:	0800170c 	.word	0x0800170c
 8000418:	08000341 	.word	0x08000341
 800041c:	20000028 	.word	0x20000028
 8000420:	08001714 	.word	0x08001714
 8000424:	08000359 	.word	0x08000359
 8000428:	20000000 	.word	0x20000000
 800042c:	0800171c 	.word	0x0800171c

08000430 <finished_transmission>:


void finished_transmission(uint32_t bytes_sent) {
 8000430:	b480      	push	{r7}
 8000432:	b085      	sub	sp, #20
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
	for (volatile uint32_t i = 0; i < 0x8; i++) {
 8000438:	2300      	movs	r3, #0
 800043a:	60fb      	str	r3, [r7, #12]
 800043c:	e002      	b.n	8000444 <finished_transmission+0x14>
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	3301      	adds	r3, #1
 8000442:	60fb      	str	r3, [r7, #12]
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	2b07      	cmp	r3, #7
 8000448:	d9f9      	bls.n	800043e <finished_transmission+0xe>
	}
}
 800044a:	bf00      	nop
 800044c:	bf00      	nop
 800044e:	3714      	adds	r7, #20
 8000450:	46bd      	mov	sp, r7
 8000452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000456:	4770      	bx	lr

08000458 <main>:


int main(void) {
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
	enable_clocks();
 800045c:	f7ff ff32 	bl	80002c4 <enable_clocks>
	initialise_board();
 8000460:	f7ff ff1e 	bl	80002a0 <initialise_board>
	enable_timer_interrupt();
 8000464:	f000 f8e8 	bl	8000638 <enable_timer_interrupt>
    SerialInitialise(BAUD_115200, &USART1_PORT, finished_transmission, received_new_string);
 8000468:	4b03      	ldr	r3, [pc, #12]	; (8000478 <main+0x20>)
 800046a:	4a04      	ldr	r2, [pc, #16]	; (800047c <main+0x24>)
 800046c:	4904      	ldr	r1, [pc, #16]	; (8000480 <main+0x28>)
 800046e:	2004      	movs	r0, #4
 8000470:	f000 f9aa 	bl	80007c8 <SerialInitialise>

    for (;;) {
 8000474:	e7fe      	b.n	8000474 <main+0x1c>
 8000476:	bf00      	nop
 8000478:	080002e5 	.word	0x080002e5
 800047c:	08000431 	.word	0x08000431
 8000480:	20000050 	.word	0x20000050

08000484 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	4603      	mov	r3, r0
 800048c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800048e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000492:	2b00      	cmp	r3, #0
 8000494:	db0b      	blt.n	80004ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000496:	79fb      	ldrb	r3, [r7, #7]
 8000498:	f003 021f 	and.w	r2, r3, #31
 800049c:	4907      	ldr	r1, [pc, #28]	; (80004bc <__NVIC_EnableIRQ+0x38>)
 800049e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004a2:	095b      	lsrs	r3, r3, #5
 80004a4:	2001      	movs	r0, #1
 80004a6:	fa00 f202 	lsl.w	r2, r0, r2
 80004aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80004ae:	bf00      	nop
 80004b0:	370c      	adds	r7, #12
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop
 80004bc:	e000e100 	.word	0xe000e100

080004c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	6039      	str	r1, [r7, #0]
 80004ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	db0a      	blt.n	80004ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	b2da      	uxtb	r2, r3
 80004d8:	490c      	ldr	r1, [pc, #48]	; (800050c <__NVIC_SetPriority+0x4c>)
 80004da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004de:	0112      	lsls	r2, r2, #4
 80004e0:	b2d2      	uxtb	r2, r2
 80004e2:	440b      	add	r3, r1
 80004e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80004e8:	e00a      	b.n	8000500 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	b2da      	uxtb	r2, r3
 80004ee:	4908      	ldr	r1, [pc, #32]	; (8000510 <__NVIC_SetPriority+0x50>)
 80004f0:	79fb      	ldrb	r3, [r7, #7]
 80004f2:	f003 030f 	and.w	r3, r3, #15
 80004f6:	3b04      	subs	r3, #4
 80004f8:	0112      	lsls	r2, r2, #4
 80004fa:	b2d2      	uxtb	r2, r2
 80004fc:	440b      	add	r3, r1
 80004fe:	761a      	strb	r2, [r3, #24]
}
 8000500:	bf00      	nop
 8000502:	370c      	adds	r7, #12
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr
 800050c:	e000e100 	.word	0xe000e100
 8000510:	e000ed00 	.word	0xe000ed00

08000514 <TimerInitialise>:




// initialise a hardware timer
void TimerInitialise(HardwareTimer *hardware_timer, void (*completion_function)()) {
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	6039      	str	r1, [r7, #0]

    // Enable clock
    RCC->APB1ENR |= hardware_timer->MaskAPB1ENR;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	695a      	ldr	r2, [r3, #20]
 8000522:	4b19      	ldr	r3, [pc, #100]	; (8000588 <TimerInitialise+0x74>)
 8000524:	69db      	ldr	r3, [r3, #28]
 8000526:	4918      	ldr	r1, [pc, #96]	; (8000588 <TimerInitialise+0x74>)
 8000528:	4313      	orrs	r3, r2
 800052a:	61cb      	str	r3, [r1, #28]

    // set prescaler
    hardware_timer->TIMx->PSC = hardware_timer->PrescaleValue;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	889b      	ldrh	r3, [r3, #4]
 8000530:	b29a      	uxth	r2, r3
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	629a      	str	r2, [r3, #40]	; 0x28

    // set auto reload register
    hardware_timer->TIMx->ARR = hardware_timer->ARRValue;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	687a      	ldr	r2, [r7, #4]
 800053e:	6892      	ldr	r2, [r2, #8]
 8000540:	62da      	str	r2, [r3, #44]	; 0x2c

    // set CR1 mask
    hardware_timer->TIMx->CR1 |= hardware_timer->MaskCR1;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	69d9      	ldr	r1, [r3, #28]
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	681a      	ldr	r2, [r3, #0]
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	430a      	orrs	r2, r1
 8000552:	601a      	str	r2, [r3, #0]

    // set DIER mask
    hardware_timer->TIMx->DIER |= hardware_timer->MaskDIER;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	6a19      	ldr	r1, [r3, #32]
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	68da      	ldr	r2, [r3, #12]
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	430a      	orrs	r2, r1
 8000564:	60da      	str	r2, [r3, #12]

    // start TIMx
    hardware_timer->TIMx->CR1 |= TIM_CR1_CEN;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	681a      	ldr	r2, [r3, #0]
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f042 0201 	orr.w	r2, r2, #1
 8000574:	601a      	str	r2, [r3, #0]

    // set the timer completion function
    hardware_timer->timer_completion_function = completion_function;
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	683a      	ldr	r2, [r7, #0]
 800057a:	625a      	str	r2, [r3, #36]	; 0x24

}
 800057c:	bf00      	nop
 800057e:	370c      	adds	r7, #12
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr
 8000588:	40021000 	.word	0x40021000

0800058c <TIM2_IRQHandler>:

// tim2 overflow handler
void TIM2_IRQHandler(void) {
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF) {
 8000590:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000594:	691b      	ldr	r3, [r3, #16]
 8000596:	f003 0301 	and.w	r3, r3, #1
 800059a:	2b00      	cmp	r3, #0
 800059c:	d01e      	beq.n	80005dc <TIM2_IRQHandler+0x50>
        TIM2->SR &= ~TIM_SR_UIF; // Clear the interrupt flag
 800059e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005a2:	691b      	ldr	r3, [r3, #16]
 80005a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005a8:	f023 0301 	bic.w	r3, r3, #1
 80005ac:	6113      	str	r3, [r2, #16]

        if (TIM2_init.oneShotMode) {
 80005ae:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <TIM2_IRQHandler+0x54>)
 80005b0:	7b1b      	ldrb	r3, [r3, #12]
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d00a      	beq.n	80005ce <TIM2_IRQHandler+0x42>
            TIM2->CR1 &= ~TIM_CR1_CEN; // Stop the timer if in one-shot mode
 80005b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005c2:	f023 0301 	bic.w	r3, r3, #1
 80005c6:	6013      	str	r3, [r2, #0]

            TIM2_init.oneShotMode = 0; // turn off the oneshot mode
 80005c8:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <TIM2_IRQHandler+0x54>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	731a      	strb	r2, [r3, #12]
        }

        if (TIM2_init.timer_completion_function != NULL) {
 80005ce:	4b04      	ldr	r3, [pc, #16]	; (80005e0 <TIM2_IRQHandler+0x54>)
 80005d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d002      	beq.n	80005dc <TIM2_IRQHandler+0x50>
            TIM2_init.timer_completion_function();
 80005d6:	4b02      	ldr	r3, [pc, #8]	; (80005e0 <TIM2_IRQHandler+0x54>)
 80005d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005da:	4798      	blx	r3
        }
    }
}
 80005dc:	bf00      	nop
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	20000000 	.word	0x20000000

080005e4 <TIM4_IRQHandler>:

// tim4 overflow handler
void TIM4_IRQHandler(void) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
    if (TIM4->SR & TIM_SR_UIF) {
 80005e8:	4b11      	ldr	r3, [pc, #68]	; (8000630 <TIM4_IRQHandler+0x4c>)
 80005ea:	691b      	ldr	r3, [r3, #16]
 80005ec:	f003 0301 	and.w	r3, r3, #1
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d01a      	beq.n	800062a <TIM4_IRQHandler+0x46>
        TIM4->SR &= ~TIM_SR_UIF; // Clear the interrupt flag
 80005f4:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <TIM4_IRQHandler+0x4c>)
 80005f6:	691b      	ldr	r3, [r3, #16]
 80005f8:	4a0d      	ldr	r2, [pc, #52]	; (8000630 <TIM4_IRQHandler+0x4c>)
 80005fa:	f023 0301 	bic.w	r3, r3, #1
 80005fe:	6113      	str	r3, [r2, #16]

        if (TIM4_init.oneShotMode) {
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <TIM4_IRQHandler+0x50>)
 8000602:	7b1b      	ldrb	r3, [r3, #12]
 8000604:	b2db      	uxtb	r3, r3
 8000606:	2b00      	cmp	r3, #0
 8000608:	d008      	beq.n	800061c <TIM4_IRQHandler+0x38>
            TIM4->CR1 &= ~TIM_CR1_CEN; // Stop the timer if in one-shot mode
 800060a:	4b09      	ldr	r3, [pc, #36]	; (8000630 <TIM4_IRQHandler+0x4c>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a08      	ldr	r2, [pc, #32]	; (8000630 <TIM4_IRQHandler+0x4c>)
 8000610:	f023 0301 	bic.w	r3, r3, #1
 8000614:	6013      	str	r3, [r2, #0]

            TIM4_init.oneShotMode = 0; // turn off the oneshot mode
 8000616:	4b07      	ldr	r3, [pc, #28]	; (8000634 <TIM4_IRQHandler+0x50>)
 8000618:	2200      	movs	r2, #0
 800061a:	731a      	strb	r2, [r3, #12]
        }

        if (TIM4_init.timer_completion_function != NULL) {
 800061c:	4b05      	ldr	r3, [pc, #20]	; (8000634 <TIM4_IRQHandler+0x50>)
 800061e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000620:	2b00      	cmp	r3, #0
 8000622:	d002      	beq.n	800062a <TIM4_IRQHandler+0x46>
            TIM4_init.timer_completion_function();
 8000624:	4b03      	ldr	r3, [pc, #12]	; (8000634 <TIM4_IRQHandler+0x50>)
 8000626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000628:	4798      	blx	r3
        }
    }
}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40000800 	.word	0x40000800
 8000634:	20000028 	.word	0x20000028

08000638 <enable_timer_interrupt>:


// enable the timer overflow interrupt
void enable_timer_interrupt() {
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800063c:	b672      	cpsid	i
}
 800063e:	bf00      	nop
    // disable interrupts
	__disable_irq();

	NVIC_SetPriority(TIM2_IRQn, 1); // Set priority
 8000640:	2101      	movs	r1, #1
 8000642:	201c      	movs	r0, #28
 8000644:	f7ff ff3c 	bl	80004c0 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM2_IRQn); 		// Enable TIM2 IRQ
 8000648:	201c      	movs	r0, #28
 800064a:	f7ff ff1b 	bl	8000484 <__NVIC_EnableIRQ>

	NVIC_SetPriority(TIM4_IRQn, 1); // Set priority
 800064e:	2101      	movs	r1, #1
 8000650:	201e      	movs	r0, #30
 8000652:	f7ff ff35 	bl	80004c0 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM4_IRQn); 		// Enable TIM2 IRQ
 8000656:	201e      	movs	r0, #30
 8000658:	f7ff ff14 	bl	8000484 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800065c:	b662      	cpsie	i
}
 800065e:	bf00      	nop

    // re-enable interrupts
    __enable_irq();
}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}

08000664 <setPrescaleValue>:

// set the auto-reload register value
// input:
// - hardware_timer: pointer to the hardware timer where the period is being set
// - value: the desired prescaler to be set
void setPrescaleValue(struct _HardwareTimer *hardware_timer, uint16_t value) {
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	460b      	mov	r3, r1
 800066e:	807b      	strh	r3, [r7, #2]
	// set value
	hardware_timer->PrescaleValue = value;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	887a      	ldrh	r2, [r7, #2]
 8000674:	809a      	strh	r2, [r3, #4]
    hardware_timer->TIMx->PSC = value;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	887a      	ldrh	r2, [r7, #2]
 800067c:	629a      	str	r2, [r3, #40]	; 0x28

	// reset timer to engage clock
	hardware_timer->TIMx->EGR |= 0x01;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	695a      	ldr	r2, [r3, #20]
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f042 0201 	orr.w	r2, r2, #1
 800068c:	615a      	str	r2, [r3, #20]
}
 800068e:	bf00      	nop
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr

0800069a <setARRValue>:

// set the auto-reload register value
// input:
// - hardware_timer: pointer to the hardware timer where the period is being set
// - value: the desired ARRValue to be set
void setARRValue(struct _HardwareTimer *hardware_timer, uint32_t value) {
 800069a:	b480      	push	{r7}
 800069c:	b083      	sub	sp, #12
 800069e:	af00      	add	r7, sp, #0
 80006a0:	6078      	str	r0, [r7, #4]
 80006a2:	6039      	str	r1, [r7, #0]
	// set value
	hardware_timer->ARRValue = value;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	683a      	ldr	r2, [r7, #0]
 80006a8:	609a      	str	r2, [r3, #8]
    hardware_timer->TIMx->ARR = value;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	683a      	ldr	r2, [r7, #0]
 80006b0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80006b2:	bf00      	nop
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr

080006be <setPeriod>:
// Will also reset clock.
// input:
// - hardware_timer: pointer to the hardware timer where the period is being set
// - period: the delay period in microseconds

void setPeriod(struct _HardwareTimer *hardware_timer, uint32_t period) {
 80006be:	b580      	push	{r7, lr}
 80006c0:	b082      	sub	sp, #8
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	6078      	str	r0, [r7, #4]
 80006c6:	6039      	str	r1, [r7, #0]
	setARRValue(hardware_timer, period);  	// set overflow to period value
 80006c8:	6839      	ldr	r1, [r7, #0]
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f7ff ffe5 	bl	800069a <setARRValue>
	setPrescaleValue(hardware_timer, 8000-1); 	// make clock freq 1MHz
 80006d0:	f641 713f 	movw	r1, #7999	; 0x1f3f
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f7ff ffc5 	bl	8000664 <setPrescaleValue>
}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}

080006e2 <set_one_shot_mode>:
void setCompletionFunc(struct _HardwareTimer *hardware_timer, void (*completion_function)()){
	hardware_timer->timer_completion_function = completion_function;
}


void set_one_shot_mode(struct _HardwareTimer *hardware_timer, uint32_t t_delay, void (*completion_function)()) {
 80006e2:	b580      	push	{r7, lr}
 80006e4:	b084      	sub	sp, #16
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	60f8      	str	r0, [r7, #12]
 80006ea:	60b9      	str	r1, [r7, #8]
 80006ec:	607a      	str	r2, [r7, #4]

	// initialise the timer
	TimerInitialise(hardware_timer, completion_function);
 80006ee:	6879      	ldr	r1, [r7, #4]
 80006f0:	68f8      	ldr	r0, [r7, #12]
 80006f2:	f7ff ff0f 	bl	8000514 <TimerInitialise>

	// set timer period
	setPeriod(hardware_timer, t_delay);
 80006f6:	68b9      	ldr	r1, [r7, #8]
 80006f8:	68f8      	ldr	r0, [r7, #12]
 80006fa:	f7ff ffe0 	bl	80006be <setPeriod>

	// set the one shot mode to 1
	hardware_timer->oneShotMode = 1;
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	2201      	movs	r2, #1
 8000702:	731a      	strb	r2, [r3, #12]

}
 8000704:	bf00      	nop
 8000706:	3710      	adds	r7, #16
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <set_continuous_mode>:

void set_continuous_mode(struct _HardwareTimer *hardware_timer, uint32_t period, void (*timer_callback)()) {
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	60f8      	str	r0, [r7, #12]
 8000714:	60b9      	str	r1, [r7, #8]
 8000716:	607a      	str	r2, [r7, #4]
    // Example implementation; adjust as per your timer setup

	// initialise the timer
	TimerInitialise(hardware_timer, timer_callback);
 8000718:	6879      	ldr	r1, [r7, #4]
 800071a:	68f8      	ldr	r0, [r7, #12]
 800071c:	f7ff fefa 	bl	8000514 <TimerInitialise>

	// Set timer period
    setPeriod(hardware_timer, period);
 8000720:	68b9      	ldr	r1, [r7, #8]
 8000722:	68f8      	ldr	r0, [r7, #12]
 8000724:	f7ff ffcb 	bl	80006be <setPeriod>

    // Ensure one-shot mode is disabled
    hardware_timer->oneShotMode = 0;
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	2200      	movs	r2, #0
 800072c:	731a      	strb	r2, [r3, #12]
}
 800072e:	bf00      	nop
 8000730:	3710      	adds	r7, #16
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
	...

08000738 <__NVIC_EnableIRQ>:
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000746:	2b00      	cmp	r3, #0
 8000748:	db0b      	blt.n	8000762 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	f003 021f 	and.w	r2, r3, #31
 8000750:	4907      	ldr	r1, [pc, #28]	; (8000770 <__NVIC_EnableIRQ+0x38>)
 8000752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000756:	095b      	lsrs	r3, r3, #5
 8000758:	2001      	movs	r0, #1
 800075a:	fa00 f202 	lsl.w	r2, r0, r2
 800075e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000762:	bf00      	nop
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	e000e100 	.word	0xe000e100

08000774 <__NVIC_SetPriority>:
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	6039      	str	r1, [r7, #0]
 800077e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000784:	2b00      	cmp	r3, #0
 8000786:	db0a      	blt.n	800079e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	b2da      	uxtb	r2, r3
 800078c:	490c      	ldr	r1, [pc, #48]	; (80007c0 <__NVIC_SetPriority+0x4c>)
 800078e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000792:	0112      	lsls	r2, r2, #4
 8000794:	b2d2      	uxtb	r2, r2
 8000796:	440b      	add	r3, r1
 8000798:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800079c:	e00a      	b.n	80007b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	b2da      	uxtb	r2, r3
 80007a2:	4908      	ldr	r1, [pc, #32]	; (80007c4 <__NVIC_SetPriority+0x50>)
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	f003 030f 	and.w	r3, r3, #15
 80007aa:	3b04      	subs	r3, #4
 80007ac:	0112      	lsls	r2, r2, #4
 80007ae:	b2d2      	uxtb	r2, r2
 80007b0:	440b      	add	r3, r1
 80007b2:	761a      	strb	r2, [r3, #24]
}
 80007b4:	bf00      	nop
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr
 80007c0:	e000e100 	.word	0xe000e100
 80007c4:	e000ed00 	.word	0xe000ed00

080007c8 <SerialInitialise>:
    .pos = 0,
    .completion_function = NULL,
    .receive_callback = NULL
};

void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t), void (*receive_callback)(uint8_t *, uint32_t)) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	60f8      	str	r0, [r7, #12]
 80007d0:	60b9      	str	r1, [r7, #8]
 80007d2:	607a      	str	r2, [r7, #4]
 80007d4:	603b      	str	r3, [r7, #0]
    serial_port->completion_function = completion_function;
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	625a      	str	r2, [r3, #36]	; 0x24
    serial_port->receive_callback = receive_callback;
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	683a      	ldr	r2, [r7, #0]
 80007e0:	629a      	str	r2, [r3, #40]	; 0x28

    // Enable clock for GPIO and USART
    RCC->AHBENR |= serial_port->MaskAHBENR;
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	691a      	ldr	r2, [r3, #16]
 80007e6:	4b27      	ldr	r3, [pc, #156]	; (8000884 <SerialInitialise+0xbc>)
 80007e8:	695b      	ldr	r3, [r3, #20]
 80007ea:	4926      	ldr	r1, [pc, #152]	; (8000884 <SerialInitialise+0xbc>)
 80007ec:	4313      	orrs	r3, r2
 80007ee:	614b      	str	r3, [r1, #20]
    RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	689a      	ldr	r2, [r3, #8]
 80007f4:	4b23      	ldr	r3, [pc, #140]	; (8000884 <SerialInitialise+0xbc>)
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	4922      	ldr	r1, [pc, #136]	; (8000884 <SerialInitialise+0xbc>)
 80007fa:	4313      	orrs	r3, r2
 80007fc:	618b      	str	r3, [r1, #24]

    // Configure GPIO pins for USART
    serial_port->GPIO->MODER |= serial_port->SerialPinModeValue;
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	6959      	ldr	r1, [r3, #20]
 8000802:	68bb      	ldr	r3, [r7, #8]
 8000804:	685b      	ldr	r3, [r3, #4]
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	685b      	ldr	r3, [r3, #4]
 800080c:	430a      	orrs	r2, r1
 800080e:	601a      	str	r2, [r3, #0]
    serial_port->GPIO->OSPEEDR |= serial_port->SerialPinSpeedValue;
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	6999      	ldr	r1, [r3, #24]
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	685b      	ldr	r3, [r3, #4]
 8000818:	689a      	ldr	r2, [r3, #8]
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	430a      	orrs	r2, r1
 8000820:	609a      	str	r2, [r3, #8]
    serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	69d9      	ldr	r1, [r3, #28]
 8000826:	68bb      	ldr	r3, [r7, #8]
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	6a1a      	ldr	r2, [r3, #32]
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	430a      	orrs	r2, r1
 8000832:	621a      	str	r2, [r3, #32]
    serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	6a19      	ldr	r1, [r3, #32]
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	685b      	ldr	r3, [r3, #4]
 800083c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	430a      	orrs	r2, r1
 8000844:	625a      	str	r2, [r3, #36]	; 0x24

    // Configure USART
    // For 115200 baud rate at 8MHz clock, the baud rate divider is 69.4444 (approximately).
    // Use the closest integer value for the baud rate register (BRR), which is 69.
    serial_port->UART->BRR = 69;
 8000846:	68bb      	ldr	r3, [r7, #8]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	2245      	movs	r2, #69	; 0x45
 800084c:	60da      	str	r2, [r3, #12]

    serial_port->UART->CR1 |= USART_CR1_RE | USART_CR1_TE | USART_CR1_UE; // Enable receiver, transmitter, and USART itself
 800084e:	68bb      	ldr	r3, [r7, #8]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f042 020d 	orr.w	r2, r2, #13
 800085c:	601a      	str	r2, [r3, #0]

    // Enable USART interrupt in NVIC
    NVIC_SetPriority(USART1_IRQn, 1); // Set priority as per application needs
 800085e:	2101      	movs	r1, #1
 8000860:	2025      	movs	r0, #37	; 0x25
 8000862:	f7ff ff87 	bl	8000774 <__NVIC_SetPriority>
    NVIC_EnableIRQ(USART1_IRQn);
 8000866:	2025      	movs	r0, #37	; 0x25
 8000868:	f7ff ff66 	bl	8000738 <__NVIC_EnableIRQ>

    // Enable RXNE interrupt
    serial_port->UART->CR1 |= USART_CR1_RXNEIE;
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f042 0220 	orr.w	r2, r2, #32
 800087a:	601a      	str	r2, [r3, #0]
}
 800087c:	bf00      	nop
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40021000 	.word	0x40021000

08000888 <SerialOutputChar>:

void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	6039      	str	r1, [r7, #0]
 8000892:	71fb      	strb	r3, [r7, #7]
    while (!(serial_port->UART->ISR & USART_ISR_TXE)) {}
 8000894:	bf00      	nop
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	69db      	ldr	r3, [r3, #28]
 800089c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d0f8      	beq.n	8000896 <SerialOutputChar+0xe>
    serial_port->UART->TDR = data;
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	79fa      	ldrb	r2, [r7, #7]
 80008aa:	b292      	uxth	r2, r2
 80008ac:	851a      	strh	r2, [r3, #40]	; 0x28
    serial_port->UART->CR1 |= USART_CR1_TXEIE;
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80008bc:	601a      	str	r2, [r3, #0]
}
 80008be:	bf00      	nop
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr

080008ca <SerialOutputString>:

void SerialOutputString(uint8_t *pt, SerialPort *serial_port) {
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b082      	sub	sp, #8
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	6078      	str	r0, [r7, #4]
 80008d2:	6039      	str	r1, [r7, #0]
    while (*pt) {
 80008d4:	e007      	b.n	80008e6 <SerialOutputString+0x1c>
        SerialOutputChar(*pt++, serial_port);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	1c5a      	adds	r2, r3, #1
 80008da:	607a      	str	r2, [r7, #4]
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	6839      	ldr	r1, [r7, #0]
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff ffd1 	bl	8000888 <SerialOutputChar>
    while (*pt) {
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d1f3      	bne.n	80008d6 <SerialOutputString+0xc>
    }
}
 80008ee:	bf00      	nop
 80008f0:	bf00      	nop
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <USART1_IRQHandler>:

void USART1_IRQHandler(void) {
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
    if (USART1->ISR & USART_ISR_RXNE) {
 80008fe:	4b2a      	ldr	r3, [pc, #168]	; (80009a8 <USART1_IRQHandler+0xb0>)
 8000900:	69db      	ldr	r3, [r3, #28]
 8000902:	f003 0320 	and.w	r3, r3, #32
 8000906:	2b00      	cmp	r3, #0
 8000908:	d04a      	beq.n	80009a0 <USART1_IRQHandler+0xa8>
        uint8_t data = USART1->RDR;
 800090a:	4b27      	ldr	r3, [pc, #156]	; (80009a8 <USART1_IRQHandler+0xb0>)
 800090c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800090e:	b29b      	uxth	r3, r3
 8000910:	71fb      	strb	r3, [r7, #7]

        USART1_PORT.activeBuffer[USART1_PORT.pos++] = data;
 8000912:	4b26      	ldr	r3, [pc, #152]	; (80009ac <USART1_IRQHandler+0xb4>)
 8000914:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8000918:	4b24      	ldr	r3, [pc, #144]	; (80009ac <USART1_IRQHandler+0xb4>)
 800091a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800091e:	1c59      	adds	r1, r3, #1
 8000920:	4822      	ldr	r0, [pc, #136]	; (80009ac <USART1_IRQHandler+0xb4>)
 8000922:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
 8000926:	4413      	add	r3, r2
 8000928:	79fa      	ldrb	r2, [r7, #7]
 800092a:	701a      	strb	r2, [r3, #0]

        if (data == '\r' || data == '\n' || USART1_PORT.pos >= BUFFER_SIZE - 1) {
 800092c:	79fb      	ldrb	r3, [r7, #7]
 800092e:	2b0d      	cmp	r3, #13
 8000930:	d007      	beq.n	8000942 <USART1_IRQHandler+0x4a>
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	2b0a      	cmp	r3, #10
 8000936:	d004      	beq.n	8000942 <USART1_IRQHandler+0x4a>
 8000938:	4b1c      	ldr	r3, [pc, #112]	; (80009ac <USART1_IRQHandler+0xb4>)
 800093a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800093e:	2b3e      	cmp	r3, #62	; 0x3e
 8000940:	d928      	bls.n	8000994 <USART1_IRQHandler+0x9c>
            USART1_PORT.activeBuffer[USART1_PORT.pos] = '\0';  // Null-terminate the string
 8000942:	4b1a      	ldr	r3, [pc, #104]	; (80009ac <USART1_IRQHandler+0xb4>)
 8000944:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8000948:	4b18      	ldr	r3, [pc, #96]	; (80009ac <USART1_IRQHandler+0xb4>)
 800094a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800094e:	4413      	add	r3, r2
 8000950:	2200      	movs	r2, #0
 8000952:	701a      	strb	r2, [r3, #0]
            if (USART1_PORT.receive_callback != NULL) {
 8000954:	4b15      	ldr	r3, [pc, #84]	; (80009ac <USART1_IRQHandler+0xb4>)
 8000956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000958:	2b00      	cmp	r3, #0
 800095a:	d009      	beq.n	8000970 <USART1_IRQHandler+0x78>
                USART1_PORT.receive_callback(USART1_PORT.activeBuffer, USART1_PORT.pos);
 800095c:	4b13      	ldr	r3, [pc, #76]	; (80009ac <USART1_IRQHandler+0xb4>)
 800095e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000960:	4a12      	ldr	r2, [pc, #72]	; (80009ac <USART1_IRQHandler+0xb4>)
 8000962:	f8d2 20ac 	ldr.w	r2, [r2, #172]	; 0xac
 8000966:	4911      	ldr	r1, [pc, #68]	; (80009ac <USART1_IRQHandler+0xb4>)
 8000968:	f8d1 10b4 	ldr.w	r1, [r1, #180]	; 0xb4
 800096c:	4610      	mov	r0, r2
 800096e:	4798      	blx	r3
            }

            // Swap buffers
            uint8_t *temp = USART1_PORT.activeBuffer;
 8000970:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <USART1_IRQHandler+0xb4>)
 8000972:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8000976:	603b      	str	r3, [r7, #0]
            USART1_PORT.activeBuffer = USART1_PORT.processingBuffer;
 8000978:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <USART1_IRQHandler+0xb4>)
 800097a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800097e:	4a0b      	ldr	r2, [pc, #44]	; (80009ac <USART1_IRQHandler+0xb4>)
 8000980:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
            USART1_PORT.processingBuffer = temp;
 8000984:	4a09      	ldr	r2, [pc, #36]	; (80009ac <USART1_IRQHandler+0xb4>)
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
            USART1_PORT.pos = 0;
 800098c:	4b07      	ldr	r3, [pc, #28]	; (80009ac <USART1_IRQHandler+0xb4>)
 800098e:	2200      	movs	r2, #0
 8000990:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
        }

        USART1->ISR &= ~USART_ISR_RXNE;  // Clear the RXNE flag
 8000994:	4b04      	ldr	r3, [pc, #16]	; (80009a8 <USART1_IRQHandler+0xb0>)
 8000996:	69db      	ldr	r3, [r3, #28]
 8000998:	4a03      	ldr	r2, [pc, #12]	; (80009a8 <USART1_IRQHandler+0xb0>)
 800099a:	f023 0320 	bic.w	r3, r3, #32
 800099e:	61d3      	str	r3, [r2, #28]
    }
}
 80009a0:	bf00      	nop
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40013800 	.word	0x40013800
 80009ac:	20000050 	.word	0x20000050

080009b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009b0:	f8df d030 	ldr.w	sp, [pc, #48]	; 80009e4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
   // bl  SystemInit

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009b4:	480c      	ldr	r0, [pc, #48]	; (80009e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80009b6:	490d      	ldr	r1, [pc, #52]	; (80009ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80009b8:	4a0d      	ldr	r2, [pc, #52]	; (80009f0 <LoopForever+0xe>)
  movs r3, #0
 80009ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009bc:	e002      	b.n	80009c4 <LoopCopyDataInit>

080009be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009c2:	3304      	adds	r3, #4

080009c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c8:	d3f9      	bcc.n	80009be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ca:	4a0a      	ldr	r2, [pc, #40]	; (80009f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009cc:	4c0a      	ldr	r4, [pc, #40]	; (80009f8 <LoopForever+0x16>)
  movs r3, #0
 80009ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d0:	e001      	b.n	80009d6 <LoopFillZerobss>

080009d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d4:	3204      	adds	r2, #4

080009d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d8:	d3fb      	bcc.n	80009d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009da:	f000 f8c5 	bl	8000b68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009de:	f7ff fd3b 	bl	8000458 <main>

080009e2 <LoopForever>:

LoopForever:
    b LoopForever
 80009e2:	e7fe      	b.n	80009e2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009e4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80009e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009ec:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 80009f0:	08001864 	.word	0x08001864
  ldr r2, =_sbss
 80009f4:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 80009f8:	200002c0 	.word	0x200002c0

080009fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009fc:	e7fe      	b.n	80009fc <ADC1_2_IRQHandler>
	...

08000a00 <_strtoul_l.constprop.0>:
 8000a00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000a04:	4f36      	ldr	r7, [pc, #216]	; (8000ae0 <_strtoul_l.constprop.0+0xe0>)
 8000a06:	4686      	mov	lr, r0
 8000a08:	460d      	mov	r5, r1
 8000a0a:	4628      	mov	r0, r5
 8000a0c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8000a10:	5d3e      	ldrb	r6, [r7, r4]
 8000a12:	f016 0608 	ands.w	r6, r6, #8
 8000a16:	d1f8      	bne.n	8000a0a <_strtoul_l.constprop.0+0xa>
 8000a18:	2c2d      	cmp	r4, #45	; 0x2d
 8000a1a:	d130      	bne.n	8000a7e <_strtoul_l.constprop.0+0x7e>
 8000a1c:	782c      	ldrb	r4, [r5, #0]
 8000a1e:	2601      	movs	r6, #1
 8000a20:	1c85      	adds	r5, r0, #2
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d057      	beq.n	8000ad6 <_strtoul_l.constprop.0+0xd6>
 8000a26:	2b10      	cmp	r3, #16
 8000a28:	d109      	bne.n	8000a3e <_strtoul_l.constprop.0+0x3e>
 8000a2a:	2c30      	cmp	r4, #48	; 0x30
 8000a2c:	d107      	bne.n	8000a3e <_strtoul_l.constprop.0+0x3e>
 8000a2e:	7828      	ldrb	r0, [r5, #0]
 8000a30:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8000a34:	2858      	cmp	r0, #88	; 0x58
 8000a36:	d149      	bne.n	8000acc <_strtoul_l.constprop.0+0xcc>
 8000a38:	786c      	ldrb	r4, [r5, #1]
 8000a3a:	2310      	movs	r3, #16
 8000a3c:	3502      	adds	r5, #2
 8000a3e:	f04f 38ff 	mov.w	r8, #4294967295
 8000a42:	2700      	movs	r7, #0
 8000a44:	fbb8 f8f3 	udiv	r8, r8, r3
 8000a48:	fb03 f908 	mul.w	r9, r3, r8
 8000a4c:	ea6f 0909 	mvn.w	r9, r9
 8000a50:	4638      	mov	r0, r7
 8000a52:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8000a56:	f1bc 0f09 	cmp.w	ip, #9
 8000a5a:	d815      	bhi.n	8000a88 <_strtoul_l.constprop.0+0x88>
 8000a5c:	4664      	mov	r4, ip
 8000a5e:	42a3      	cmp	r3, r4
 8000a60:	dd23      	ble.n	8000aaa <_strtoul_l.constprop.0+0xaa>
 8000a62:	f1b7 3fff 	cmp.w	r7, #4294967295
 8000a66:	d007      	beq.n	8000a78 <_strtoul_l.constprop.0+0x78>
 8000a68:	4580      	cmp	r8, r0
 8000a6a:	d31b      	bcc.n	8000aa4 <_strtoul_l.constprop.0+0xa4>
 8000a6c:	d101      	bne.n	8000a72 <_strtoul_l.constprop.0+0x72>
 8000a6e:	45a1      	cmp	r9, r4
 8000a70:	db18      	blt.n	8000aa4 <_strtoul_l.constprop.0+0xa4>
 8000a72:	fb00 4003 	mla	r0, r0, r3, r4
 8000a76:	2701      	movs	r7, #1
 8000a78:	f815 4b01 	ldrb.w	r4, [r5], #1
 8000a7c:	e7e9      	b.n	8000a52 <_strtoul_l.constprop.0+0x52>
 8000a7e:	2c2b      	cmp	r4, #43	; 0x2b
 8000a80:	bf04      	itt	eq
 8000a82:	782c      	ldrbeq	r4, [r5, #0]
 8000a84:	1c85      	addeq	r5, r0, #2
 8000a86:	e7cc      	b.n	8000a22 <_strtoul_l.constprop.0+0x22>
 8000a88:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8000a8c:	f1bc 0f19 	cmp.w	ip, #25
 8000a90:	d801      	bhi.n	8000a96 <_strtoul_l.constprop.0+0x96>
 8000a92:	3c37      	subs	r4, #55	; 0x37
 8000a94:	e7e3      	b.n	8000a5e <_strtoul_l.constprop.0+0x5e>
 8000a96:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8000a9a:	f1bc 0f19 	cmp.w	ip, #25
 8000a9e:	d804      	bhi.n	8000aaa <_strtoul_l.constprop.0+0xaa>
 8000aa0:	3c57      	subs	r4, #87	; 0x57
 8000aa2:	e7dc      	b.n	8000a5e <_strtoul_l.constprop.0+0x5e>
 8000aa4:	f04f 37ff 	mov.w	r7, #4294967295
 8000aa8:	e7e6      	b.n	8000a78 <_strtoul_l.constprop.0+0x78>
 8000aaa:	1c7b      	adds	r3, r7, #1
 8000aac:	d106      	bne.n	8000abc <_strtoul_l.constprop.0+0xbc>
 8000aae:	2322      	movs	r3, #34	; 0x22
 8000ab0:	f8ce 3000 	str.w	r3, [lr]
 8000ab4:	4638      	mov	r0, r7
 8000ab6:	b932      	cbnz	r2, 8000ac6 <_strtoul_l.constprop.0+0xc6>
 8000ab8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000abc:	b106      	cbz	r6, 8000ac0 <_strtoul_l.constprop.0+0xc0>
 8000abe:	4240      	negs	r0, r0
 8000ac0:	2a00      	cmp	r2, #0
 8000ac2:	d0f9      	beq.n	8000ab8 <_strtoul_l.constprop.0+0xb8>
 8000ac4:	b107      	cbz	r7, 8000ac8 <_strtoul_l.constprop.0+0xc8>
 8000ac6:	1e69      	subs	r1, r5, #1
 8000ac8:	6011      	str	r1, [r2, #0]
 8000aca:	e7f5      	b.n	8000ab8 <_strtoul_l.constprop.0+0xb8>
 8000acc:	2430      	movs	r4, #48	; 0x30
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d1b5      	bne.n	8000a3e <_strtoul_l.constprop.0+0x3e>
 8000ad2:	2308      	movs	r3, #8
 8000ad4:	e7b3      	b.n	8000a3e <_strtoul_l.constprop.0+0x3e>
 8000ad6:	2c30      	cmp	r4, #48	; 0x30
 8000ad8:	d0a9      	beq.n	8000a2e <_strtoul_l.constprop.0+0x2e>
 8000ada:	230a      	movs	r3, #10
 8000adc:	e7af      	b.n	8000a3e <_strtoul_l.constprop.0+0x3e>
 8000ade:	bf00      	nop
 8000ae0:	0800173d 	.word	0x0800173d

08000ae4 <_strtoul_r>:
 8000ae4:	f7ff bf8c 	b.w	8000a00 <_strtoul_l.constprop.0>

08000ae8 <strtoul>:
 8000ae8:	4613      	mov	r3, r2
 8000aea:	460a      	mov	r2, r1
 8000aec:	4601      	mov	r1, r0
 8000aee:	4802      	ldr	r0, [pc, #8]	; (8000af8 <strtoul+0x10>)
 8000af0:	6800      	ldr	r0, [r0, #0]
 8000af2:	f7ff bf85 	b.w	8000a00 <_strtoul_l.constprop.0>
 8000af6:	bf00      	nop
 8000af8:	20000154 	.word	0x20000154

08000afc <siscanf>:
 8000afc:	b40e      	push	{r1, r2, r3}
 8000afe:	b510      	push	{r4, lr}
 8000b00:	b09f      	sub	sp, #124	; 0x7c
 8000b02:	ac21      	add	r4, sp, #132	; 0x84
 8000b04:	f44f 7101 	mov.w	r1, #516	; 0x204
 8000b08:	f854 2b04 	ldr.w	r2, [r4], #4
 8000b0c:	9201      	str	r2, [sp, #4]
 8000b0e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8000b12:	9004      	str	r0, [sp, #16]
 8000b14:	9008      	str	r0, [sp, #32]
 8000b16:	f7ff fb65 	bl	80001e4 <strlen>
 8000b1a:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <siscanf+0x50>)
 8000b1c:	9005      	str	r0, [sp, #20]
 8000b1e:	9009      	str	r0, [sp, #36]	; 0x24
 8000b20:	930d      	str	r3, [sp, #52]	; 0x34
 8000b22:	480b      	ldr	r0, [pc, #44]	; (8000b50 <siscanf+0x54>)
 8000b24:	9a01      	ldr	r2, [sp, #4]
 8000b26:	6800      	ldr	r0, [r0, #0]
 8000b28:	9403      	str	r4, [sp, #12]
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	9311      	str	r3, [sp, #68]	; 0x44
 8000b2e:	9316      	str	r3, [sp, #88]	; 0x58
 8000b30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b34:	f8ad 301e 	strh.w	r3, [sp, #30]
 8000b38:	a904      	add	r1, sp, #16
 8000b3a:	4623      	mov	r3, r4
 8000b3c:	f000 f98c 	bl	8000e58 <__ssvfiscanf_r>
 8000b40:	b01f      	add	sp, #124	; 0x7c
 8000b42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b46:	b003      	add	sp, #12
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	08000b55 	.word	0x08000b55
 8000b50:	20000154 	.word	0x20000154

08000b54 <__seofread>:
 8000b54:	2000      	movs	r0, #0
 8000b56:	4770      	bx	lr

08000b58 <memset>:
 8000b58:	4402      	add	r2, r0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d100      	bne.n	8000b62 <memset+0xa>
 8000b60:	4770      	bx	lr
 8000b62:	f803 1b01 	strb.w	r1, [r3], #1
 8000b66:	e7f9      	b.n	8000b5c <memset+0x4>

08000b68 <__libc_init_array>:
 8000b68:	b570      	push	{r4, r5, r6, lr}
 8000b6a:	4d0d      	ldr	r5, [pc, #52]	; (8000ba0 <__libc_init_array+0x38>)
 8000b6c:	4c0d      	ldr	r4, [pc, #52]	; (8000ba4 <__libc_init_array+0x3c>)
 8000b6e:	1b64      	subs	r4, r4, r5
 8000b70:	10a4      	asrs	r4, r4, #2
 8000b72:	2600      	movs	r6, #0
 8000b74:	42a6      	cmp	r6, r4
 8000b76:	d109      	bne.n	8000b8c <__libc_init_array+0x24>
 8000b78:	4d0b      	ldr	r5, [pc, #44]	; (8000ba8 <__libc_init_array+0x40>)
 8000b7a:	4c0c      	ldr	r4, [pc, #48]	; (8000bac <__libc_init_array+0x44>)
 8000b7c:	f000 fd94 	bl	80016a8 <_init>
 8000b80:	1b64      	subs	r4, r4, r5
 8000b82:	10a4      	asrs	r4, r4, #2
 8000b84:	2600      	movs	r6, #0
 8000b86:	42a6      	cmp	r6, r4
 8000b88:	d105      	bne.n	8000b96 <__libc_init_array+0x2e>
 8000b8a:	bd70      	pop	{r4, r5, r6, pc}
 8000b8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b90:	4798      	blx	r3
 8000b92:	3601      	adds	r6, #1
 8000b94:	e7ee      	b.n	8000b74 <__libc_init_array+0xc>
 8000b96:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b9a:	4798      	blx	r3
 8000b9c:	3601      	adds	r6, #1
 8000b9e:	e7f2      	b.n	8000b86 <__libc_init_array+0x1e>
 8000ba0:	0800185c 	.word	0x0800185c
 8000ba4:	0800185c 	.word	0x0800185c
 8000ba8:	0800185c 	.word	0x0800185c
 8000bac:	08001860 	.word	0x08001860

08000bb0 <__retarget_lock_acquire_recursive>:
 8000bb0:	4770      	bx	lr

08000bb2 <__retarget_lock_release_recursive>:
 8000bb2:	4770      	bx	lr

08000bb4 <_free_r>:
 8000bb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000bb6:	2900      	cmp	r1, #0
 8000bb8:	d044      	beq.n	8000c44 <_free_r+0x90>
 8000bba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000bbe:	9001      	str	r0, [sp, #4]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	f1a1 0404 	sub.w	r4, r1, #4
 8000bc6:	bfb8      	it	lt
 8000bc8:	18e4      	addlt	r4, r4, r3
 8000bca:	f000 f8df 	bl	8000d8c <__malloc_lock>
 8000bce:	4a1e      	ldr	r2, [pc, #120]	; (8000c48 <_free_r+0x94>)
 8000bd0:	9801      	ldr	r0, [sp, #4]
 8000bd2:	6813      	ldr	r3, [r2, #0]
 8000bd4:	b933      	cbnz	r3, 8000be4 <_free_r+0x30>
 8000bd6:	6063      	str	r3, [r4, #4]
 8000bd8:	6014      	str	r4, [r2, #0]
 8000bda:	b003      	add	sp, #12
 8000bdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000be0:	f000 b8da 	b.w	8000d98 <__malloc_unlock>
 8000be4:	42a3      	cmp	r3, r4
 8000be6:	d908      	bls.n	8000bfa <_free_r+0x46>
 8000be8:	6825      	ldr	r5, [r4, #0]
 8000bea:	1961      	adds	r1, r4, r5
 8000bec:	428b      	cmp	r3, r1
 8000bee:	bf01      	itttt	eq
 8000bf0:	6819      	ldreq	r1, [r3, #0]
 8000bf2:	685b      	ldreq	r3, [r3, #4]
 8000bf4:	1949      	addeq	r1, r1, r5
 8000bf6:	6021      	streq	r1, [r4, #0]
 8000bf8:	e7ed      	b.n	8000bd6 <_free_r+0x22>
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	b10b      	cbz	r3, 8000c04 <_free_r+0x50>
 8000c00:	42a3      	cmp	r3, r4
 8000c02:	d9fa      	bls.n	8000bfa <_free_r+0x46>
 8000c04:	6811      	ldr	r1, [r2, #0]
 8000c06:	1855      	adds	r5, r2, r1
 8000c08:	42a5      	cmp	r5, r4
 8000c0a:	d10b      	bne.n	8000c24 <_free_r+0x70>
 8000c0c:	6824      	ldr	r4, [r4, #0]
 8000c0e:	4421      	add	r1, r4
 8000c10:	1854      	adds	r4, r2, r1
 8000c12:	42a3      	cmp	r3, r4
 8000c14:	6011      	str	r1, [r2, #0]
 8000c16:	d1e0      	bne.n	8000bda <_free_r+0x26>
 8000c18:	681c      	ldr	r4, [r3, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	6053      	str	r3, [r2, #4]
 8000c1e:	440c      	add	r4, r1
 8000c20:	6014      	str	r4, [r2, #0]
 8000c22:	e7da      	b.n	8000bda <_free_r+0x26>
 8000c24:	d902      	bls.n	8000c2c <_free_r+0x78>
 8000c26:	230c      	movs	r3, #12
 8000c28:	6003      	str	r3, [r0, #0]
 8000c2a:	e7d6      	b.n	8000bda <_free_r+0x26>
 8000c2c:	6825      	ldr	r5, [r4, #0]
 8000c2e:	1961      	adds	r1, r4, r5
 8000c30:	428b      	cmp	r3, r1
 8000c32:	bf04      	itt	eq
 8000c34:	6819      	ldreq	r1, [r3, #0]
 8000c36:	685b      	ldreq	r3, [r3, #4]
 8000c38:	6063      	str	r3, [r4, #4]
 8000c3a:	bf04      	itt	eq
 8000c3c:	1949      	addeq	r1, r1, r5
 8000c3e:	6021      	streq	r1, [r4, #0]
 8000c40:	6054      	str	r4, [r2, #4]
 8000c42:	e7ca      	b.n	8000bda <_free_r+0x26>
 8000c44:	b003      	add	sp, #12
 8000c46:	bd30      	pop	{r4, r5, pc}
 8000c48:	200002b4 	.word	0x200002b4

08000c4c <sbrk_aligned>:
 8000c4c:	b570      	push	{r4, r5, r6, lr}
 8000c4e:	4e0e      	ldr	r6, [pc, #56]	; (8000c88 <sbrk_aligned+0x3c>)
 8000c50:	460c      	mov	r4, r1
 8000c52:	6831      	ldr	r1, [r6, #0]
 8000c54:	4605      	mov	r5, r0
 8000c56:	b911      	cbnz	r1, 8000c5e <sbrk_aligned+0x12>
 8000c58:	f000 fc38 	bl	80014cc <_sbrk_r>
 8000c5c:	6030      	str	r0, [r6, #0]
 8000c5e:	4621      	mov	r1, r4
 8000c60:	4628      	mov	r0, r5
 8000c62:	f000 fc33 	bl	80014cc <_sbrk_r>
 8000c66:	1c43      	adds	r3, r0, #1
 8000c68:	d00a      	beq.n	8000c80 <sbrk_aligned+0x34>
 8000c6a:	1cc4      	adds	r4, r0, #3
 8000c6c:	f024 0403 	bic.w	r4, r4, #3
 8000c70:	42a0      	cmp	r0, r4
 8000c72:	d007      	beq.n	8000c84 <sbrk_aligned+0x38>
 8000c74:	1a21      	subs	r1, r4, r0
 8000c76:	4628      	mov	r0, r5
 8000c78:	f000 fc28 	bl	80014cc <_sbrk_r>
 8000c7c:	3001      	adds	r0, #1
 8000c7e:	d101      	bne.n	8000c84 <sbrk_aligned+0x38>
 8000c80:	f04f 34ff 	mov.w	r4, #4294967295
 8000c84:	4620      	mov	r0, r4
 8000c86:	bd70      	pop	{r4, r5, r6, pc}
 8000c88:	200002b8 	.word	0x200002b8

08000c8c <_malloc_r>:
 8000c8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c90:	1ccd      	adds	r5, r1, #3
 8000c92:	f025 0503 	bic.w	r5, r5, #3
 8000c96:	3508      	adds	r5, #8
 8000c98:	2d0c      	cmp	r5, #12
 8000c9a:	bf38      	it	cc
 8000c9c:	250c      	movcc	r5, #12
 8000c9e:	2d00      	cmp	r5, #0
 8000ca0:	4607      	mov	r7, r0
 8000ca2:	db01      	blt.n	8000ca8 <_malloc_r+0x1c>
 8000ca4:	42a9      	cmp	r1, r5
 8000ca6:	d905      	bls.n	8000cb4 <_malloc_r+0x28>
 8000ca8:	230c      	movs	r3, #12
 8000caa:	603b      	str	r3, [r7, #0]
 8000cac:	2600      	movs	r6, #0
 8000cae:	4630      	mov	r0, r6
 8000cb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000cb4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000d88 <_malloc_r+0xfc>
 8000cb8:	f000 f868 	bl	8000d8c <__malloc_lock>
 8000cbc:	f8d8 3000 	ldr.w	r3, [r8]
 8000cc0:	461c      	mov	r4, r3
 8000cc2:	bb5c      	cbnz	r4, 8000d1c <_malloc_r+0x90>
 8000cc4:	4629      	mov	r1, r5
 8000cc6:	4638      	mov	r0, r7
 8000cc8:	f7ff ffc0 	bl	8000c4c <sbrk_aligned>
 8000ccc:	1c43      	adds	r3, r0, #1
 8000cce:	4604      	mov	r4, r0
 8000cd0:	d155      	bne.n	8000d7e <_malloc_r+0xf2>
 8000cd2:	f8d8 4000 	ldr.w	r4, [r8]
 8000cd6:	4626      	mov	r6, r4
 8000cd8:	2e00      	cmp	r6, #0
 8000cda:	d145      	bne.n	8000d68 <_malloc_r+0xdc>
 8000cdc:	2c00      	cmp	r4, #0
 8000cde:	d048      	beq.n	8000d72 <_malloc_r+0xe6>
 8000ce0:	6823      	ldr	r3, [r4, #0]
 8000ce2:	4631      	mov	r1, r6
 8000ce4:	4638      	mov	r0, r7
 8000ce6:	eb04 0903 	add.w	r9, r4, r3
 8000cea:	f000 fbef 	bl	80014cc <_sbrk_r>
 8000cee:	4581      	cmp	r9, r0
 8000cf0:	d13f      	bne.n	8000d72 <_malloc_r+0xe6>
 8000cf2:	6821      	ldr	r1, [r4, #0]
 8000cf4:	1a6d      	subs	r5, r5, r1
 8000cf6:	4629      	mov	r1, r5
 8000cf8:	4638      	mov	r0, r7
 8000cfa:	f7ff ffa7 	bl	8000c4c <sbrk_aligned>
 8000cfe:	3001      	adds	r0, #1
 8000d00:	d037      	beq.n	8000d72 <_malloc_r+0xe6>
 8000d02:	6823      	ldr	r3, [r4, #0]
 8000d04:	442b      	add	r3, r5
 8000d06:	6023      	str	r3, [r4, #0]
 8000d08:	f8d8 3000 	ldr.w	r3, [r8]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d038      	beq.n	8000d82 <_malloc_r+0xf6>
 8000d10:	685a      	ldr	r2, [r3, #4]
 8000d12:	42a2      	cmp	r2, r4
 8000d14:	d12b      	bne.n	8000d6e <_malloc_r+0xe2>
 8000d16:	2200      	movs	r2, #0
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	e00f      	b.n	8000d3c <_malloc_r+0xb0>
 8000d1c:	6822      	ldr	r2, [r4, #0]
 8000d1e:	1b52      	subs	r2, r2, r5
 8000d20:	d41f      	bmi.n	8000d62 <_malloc_r+0xd6>
 8000d22:	2a0b      	cmp	r2, #11
 8000d24:	d917      	bls.n	8000d56 <_malloc_r+0xca>
 8000d26:	1961      	adds	r1, r4, r5
 8000d28:	42a3      	cmp	r3, r4
 8000d2a:	6025      	str	r5, [r4, #0]
 8000d2c:	bf18      	it	ne
 8000d2e:	6059      	strne	r1, [r3, #4]
 8000d30:	6863      	ldr	r3, [r4, #4]
 8000d32:	bf08      	it	eq
 8000d34:	f8c8 1000 	streq.w	r1, [r8]
 8000d38:	5162      	str	r2, [r4, r5]
 8000d3a:	604b      	str	r3, [r1, #4]
 8000d3c:	4638      	mov	r0, r7
 8000d3e:	f104 060b 	add.w	r6, r4, #11
 8000d42:	f000 f829 	bl	8000d98 <__malloc_unlock>
 8000d46:	f026 0607 	bic.w	r6, r6, #7
 8000d4a:	1d23      	adds	r3, r4, #4
 8000d4c:	1af2      	subs	r2, r6, r3
 8000d4e:	d0ae      	beq.n	8000cae <_malloc_r+0x22>
 8000d50:	1b9b      	subs	r3, r3, r6
 8000d52:	50a3      	str	r3, [r4, r2]
 8000d54:	e7ab      	b.n	8000cae <_malloc_r+0x22>
 8000d56:	42a3      	cmp	r3, r4
 8000d58:	6862      	ldr	r2, [r4, #4]
 8000d5a:	d1dd      	bne.n	8000d18 <_malloc_r+0x8c>
 8000d5c:	f8c8 2000 	str.w	r2, [r8]
 8000d60:	e7ec      	b.n	8000d3c <_malloc_r+0xb0>
 8000d62:	4623      	mov	r3, r4
 8000d64:	6864      	ldr	r4, [r4, #4]
 8000d66:	e7ac      	b.n	8000cc2 <_malloc_r+0x36>
 8000d68:	4634      	mov	r4, r6
 8000d6a:	6876      	ldr	r6, [r6, #4]
 8000d6c:	e7b4      	b.n	8000cd8 <_malloc_r+0x4c>
 8000d6e:	4613      	mov	r3, r2
 8000d70:	e7cc      	b.n	8000d0c <_malloc_r+0x80>
 8000d72:	230c      	movs	r3, #12
 8000d74:	603b      	str	r3, [r7, #0]
 8000d76:	4638      	mov	r0, r7
 8000d78:	f000 f80e 	bl	8000d98 <__malloc_unlock>
 8000d7c:	e797      	b.n	8000cae <_malloc_r+0x22>
 8000d7e:	6025      	str	r5, [r4, #0]
 8000d80:	e7dc      	b.n	8000d3c <_malloc_r+0xb0>
 8000d82:	605b      	str	r3, [r3, #4]
 8000d84:	deff      	udf	#255	; 0xff
 8000d86:	bf00      	nop
 8000d88:	200002b4 	.word	0x200002b4

08000d8c <__malloc_lock>:
 8000d8c:	4801      	ldr	r0, [pc, #4]	; (8000d94 <__malloc_lock+0x8>)
 8000d8e:	f7ff bf0f 	b.w	8000bb0 <__retarget_lock_acquire_recursive>
 8000d92:	bf00      	nop
 8000d94:	200002b0 	.word	0x200002b0

08000d98 <__malloc_unlock>:
 8000d98:	4801      	ldr	r0, [pc, #4]	; (8000da0 <__malloc_unlock+0x8>)
 8000d9a:	f7ff bf0a 	b.w	8000bb2 <__retarget_lock_release_recursive>
 8000d9e:	bf00      	nop
 8000da0:	200002b0 	.word	0x200002b0

08000da4 <_sungetc_r>:
 8000da4:	b538      	push	{r3, r4, r5, lr}
 8000da6:	1c4b      	adds	r3, r1, #1
 8000da8:	4614      	mov	r4, r2
 8000daa:	d103      	bne.n	8000db4 <_sungetc_r+0x10>
 8000dac:	f04f 35ff 	mov.w	r5, #4294967295
 8000db0:	4628      	mov	r0, r5
 8000db2:	bd38      	pop	{r3, r4, r5, pc}
 8000db4:	8993      	ldrh	r3, [r2, #12]
 8000db6:	f023 0320 	bic.w	r3, r3, #32
 8000dba:	8193      	strh	r3, [r2, #12]
 8000dbc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000dbe:	6852      	ldr	r2, [r2, #4]
 8000dc0:	b2cd      	uxtb	r5, r1
 8000dc2:	b18b      	cbz	r3, 8000de8 <_sungetc_r+0x44>
 8000dc4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	dd08      	ble.n	8000ddc <_sungetc_r+0x38>
 8000dca:	6823      	ldr	r3, [r4, #0]
 8000dcc:	1e5a      	subs	r2, r3, #1
 8000dce:	6022      	str	r2, [r4, #0]
 8000dd0:	f803 5c01 	strb.w	r5, [r3, #-1]
 8000dd4:	6863      	ldr	r3, [r4, #4]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	6063      	str	r3, [r4, #4]
 8000dda:	e7e9      	b.n	8000db0 <_sungetc_r+0xc>
 8000ddc:	4621      	mov	r1, r4
 8000dde:	f000 fb3a 	bl	8001456 <__submore>
 8000de2:	2800      	cmp	r0, #0
 8000de4:	d0f1      	beq.n	8000dca <_sungetc_r+0x26>
 8000de6:	e7e1      	b.n	8000dac <_sungetc_r+0x8>
 8000de8:	6921      	ldr	r1, [r4, #16]
 8000dea:	6823      	ldr	r3, [r4, #0]
 8000dec:	b151      	cbz	r1, 8000e04 <_sungetc_r+0x60>
 8000dee:	4299      	cmp	r1, r3
 8000df0:	d208      	bcs.n	8000e04 <_sungetc_r+0x60>
 8000df2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8000df6:	42a9      	cmp	r1, r5
 8000df8:	d104      	bne.n	8000e04 <_sungetc_r+0x60>
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	3201      	adds	r2, #1
 8000dfe:	6023      	str	r3, [r4, #0]
 8000e00:	6062      	str	r2, [r4, #4]
 8000e02:	e7d5      	b.n	8000db0 <_sungetc_r+0xc>
 8000e04:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8000e08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000e0c:	6363      	str	r3, [r4, #52]	; 0x34
 8000e0e:	2303      	movs	r3, #3
 8000e10:	63a3      	str	r3, [r4, #56]	; 0x38
 8000e12:	4623      	mov	r3, r4
 8000e14:	f803 5f46 	strb.w	r5, [r3, #70]!
 8000e18:	6023      	str	r3, [r4, #0]
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e7dc      	b.n	8000dd8 <_sungetc_r+0x34>

08000e1e <__ssrefill_r>:
 8000e1e:	b510      	push	{r4, lr}
 8000e20:	460c      	mov	r4, r1
 8000e22:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8000e24:	b169      	cbz	r1, 8000e42 <__ssrefill_r+0x24>
 8000e26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000e2a:	4299      	cmp	r1, r3
 8000e2c:	d001      	beq.n	8000e32 <__ssrefill_r+0x14>
 8000e2e:	f7ff fec1 	bl	8000bb4 <_free_r>
 8000e32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e34:	6063      	str	r3, [r4, #4]
 8000e36:	2000      	movs	r0, #0
 8000e38:	6360      	str	r0, [r4, #52]	; 0x34
 8000e3a:	b113      	cbz	r3, 8000e42 <__ssrefill_r+0x24>
 8000e3c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000e3e:	6023      	str	r3, [r4, #0]
 8000e40:	bd10      	pop	{r4, pc}
 8000e42:	6923      	ldr	r3, [r4, #16]
 8000e44:	6023      	str	r3, [r4, #0]
 8000e46:	2300      	movs	r3, #0
 8000e48:	6063      	str	r3, [r4, #4]
 8000e4a:	89a3      	ldrh	r3, [r4, #12]
 8000e4c:	f043 0320 	orr.w	r3, r3, #32
 8000e50:	81a3      	strh	r3, [r4, #12]
 8000e52:	f04f 30ff 	mov.w	r0, #4294967295
 8000e56:	e7f3      	b.n	8000e40 <__ssrefill_r+0x22>

08000e58 <__ssvfiscanf_r>:
 8000e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e5c:	460c      	mov	r4, r1
 8000e5e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8000e62:	2100      	movs	r1, #0
 8000e64:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8000e68:	49a6      	ldr	r1, [pc, #664]	; (8001104 <__ssvfiscanf_r+0x2ac>)
 8000e6a:	91a0      	str	r1, [sp, #640]	; 0x280
 8000e6c:	f10d 0804 	add.w	r8, sp, #4
 8000e70:	49a5      	ldr	r1, [pc, #660]	; (8001108 <__ssvfiscanf_r+0x2b0>)
 8000e72:	4fa6      	ldr	r7, [pc, #664]	; (800110c <__ssvfiscanf_r+0x2b4>)
 8000e74:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8001110 <__ssvfiscanf_r+0x2b8>
 8000e78:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8000e7c:	4606      	mov	r6, r0
 8000e7e:	91a1      	str	r1, [sp, #644]	; 0x284
 8000e80:	9300      	str	r3, [sp, #0]
 8000e82:	7813      	ldrb	r3, [r2, #0]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	f000 815a 	beq.w	800113e <__ssvfiscanf_r+0x2e6>
 8000e8a:	5cf9      	ldrb	r1, [r7, r3]
 8000e8c:	f011 0108 	ands.w	r1, r1, #8
 8000e90:	f102 0501 	add.w	r5, r2, #1
 8000e94:	d019      	beq.n	8000eca <__ssvfiscanf_r+0x72>
 8000e96:	6863      	ldr	r3, [r4, #4]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	dd0f      	ble.n	8000ebc <__ssvfiscanf_r+0x64>
 8000e9c:	6823      	ldr	r3, [r4, #0]
 8000e9e:	781a      	ldrb	r2, [r3, #0]
 8000ea0:	5cba      	ldrb	r2, [r7, r2]
 8000ea2:	0712      	lsls	r2, r2, #28
 8000ea4:	d401      	bmi.n	8000eaa <__ssvfiscanf_r+0x52>
 8000ea6:	462a      	mov	r2, r5
 8000ea8:	e7eb      	b.n	8000e82 <__ssvfiscanf_r+0x2a>
 8000eaa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8000eac:	3201      	adds	r2, #1
 8000eae:	9245      	str	r2, [sp, #276]	; 0x114
 8000eb0:	6862      	ldr	r2, [r4, #4]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	3a01      	subs	r2, #1
 8000eb6:	6062      	str	r2, [r4, #4]
 8000eb8:	6023      	str	r3, [r4, #0]
 8000eba:	e7ec      	b.n	8000e96 <__ssvfiscanf_r+0x3e>
 8000ebc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8000ebe:	4621      	mov	r1, r4
 8000ec0:	4630      	mov	r0, r6
 8000ec2:	4798      	blx	r3
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d0e9      	beq.n	8000e9c <__ssvfiscanf_r+0x44>
 8000ec8:	e7ed      	b.n	8000ea6 <__ssvfiscanf_r+0x4e>
 8000eca:	2b25      	cmp	r3, #37	; 0x25
 8000ecc:	d012      	beq.n	8000ef4 <__ssvfiscanf_r+0x9c>
 8000ece:	469a      	mov	sl, r3
 8000ed0:	6863      	ldr	r3, [r4, #4]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	f340 8091 	ble.w	8000ffa <__ssvfiscanf_r+0x1a2>
 8000ed8:	6822      	ldr	r2, [r4, #0]
 8000eda:	7813      	ldrb	r3, [r2, #0]
 8000edc:	4553      	cmp	r3, sl
 8000ede:	f040 812e 	bne.w	800113e <__ssvfiscanf_r+0x2e6>
 8000ee2:	6863      	ldr	r3, [r4, #4]
 8000ee4:	3b01      	subs	r3, #1
 8000ee6:	6063      	str	r3, [r4, #4]
 8000ee8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8000eea:	3201      	adds	r2, #1
 8000eec:	3301      	adds	r3, #1
 8000eee:	6022      	str	r2, [r4, #0]
 8000ef0:	9345      	str	r3, [sp, #276]	; 0x114
 8000ef2:	e7d8      	b.n	8000ea6 <__ssvfiscanf_r+0x4e>
 8000ef4:	9141      	str	r1, [sp, #260]	; 0x104
 8000ef6:	9143      	str	r1, [sp, #268]	; 0x10c
 8000ef8:	7853      	ldrb	r3, [r2, #1]
 8000efa:	2b2a      	cmp	r3, #42	; 0x2a
 8000efc:	bf02      	ittt	eq
 8000efe:	2310      	moveq	r3, #16
 8000f00:	1c95      	addeq	r5, r2, #2
 8000f02:	9341      	streq	r3, [sp, #260]	; 0x104
 8000f04:	220a      	movs	r2, #10
 8000f06:	46aa      	mov	sl, r5
 8000f08:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8000f0c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8000f10:	2b09      	cmp	r3, #9
 8000f12:	d91c      	bls.n	8000f4e <__ssvfiscanf_r+0xf6>
 8000f14:	487e      	ldr	r0, [pc, #504]	; (8001110 <__ssvfiscanf_r+0x2b8>)
 8000f16:	2203      	movs	r2, #3
 8000f18:	f7ff f972 	bl	8000200 <memchr>
 8000f1c:	b138      	cbz	r0, 8000f2e <__ssvfiscanf_r+0xd6>
 8000f1e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8000f20:	eba0 0009 	sub.w	r0, r0, r9
 8000f24:	2301      	movs	r3, #1
 8000f26:	4083      	lsls	r3, r0
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	9341      	str	r3, [sp, #260]	; 0x104
 8000f2c:	4655      	mov	r5, sl
 8000f2e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8000f32:	2b78      	cmp	r3, #120	; 0x78
 8000f34:	d806      	bhi.n	8000f44 <__ssvfiscanf_r+0xec>
 8000f36:	2b57      	cmp	r3, #87	; 0x57
 8000f38:	d810      	bhi.n	8000f5c <__ssvfiscanf_r+0x104>
 8000f3a:	2b25      	cmp	r3, #37	; 0x25
 8000f3c:	d0c7      	beq.n	8000ece <__ssvfiscanf_r+0x76>
 8000f3e:	d857      	bhi.n	8000ff0 <__ssvfiscanf_r+0x198>
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d065      	beq.n	8001010 <__ssvfiscanf_r+0x1b8>
 8000f44:	2303      	movs	r3, #3
 8000f46:	9347      	str	r3, [sp, #284]	; 0x11c
 8000f48:	230a      	movs	r3, #10
 8000f4a:	9342      	str	r3, [sp, #264]	; 0x108
 8000f4c:	e076      	b.n	800103c <__ssvfiscanf_r+0x1e4>
 8000f4e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8000f50:	fb02 1103 	mla	r1, r2, r3, r1
 8000f54:	3930      	subs	r1, #48	; 0x30
 8000f56:	9143      	str	r1, [sp, #268]	; 0x10c
 8000f58:	4655      	mov	r5, sl
 8000f5a:	e7d4      	b.n	8000f06 <__ssvfiscanf_r+0xae>
 8000f5c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8000f60:	2a20      	cmp	r2, #32
 8000f62:	d8ef      	bhi.n	8000f44 <__ssvfiscanf_r+0xec>
 8000f64:	a101      	add	r1, pc, #4	; (adr r1, 8000f6c <__ssvfiscanf_r+0x114>)
 8000f66:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8000f6a:	bf00      	nop
 8000f6c:	0800101f 	.word	0x0800101f
 8000f70:	08000f45 	.word	0x08000f45
 8000f74:	08000f45 	.word	0x08000f45
 8000f78:	0800107d 	.word	0x0800107d
 8000f7c:	08000f45 	.word	0x08000f45
 8000f80:	08000f45 	.word	0x08000f45
 8000f84:	08000f45 	.word	0x08000f45
 8000f88:	08000f45 	.word	0x08000f45
 8000f8c:	08000f45 	.word	0x08000f45
 8000f90:	08000f45 	.word	0x08000f45
 8000f94:	08000f45 	.word	0x08000f45
 8000f98:	08001093 	.word	0x08001093
 8000f9c:	08001079 	.word	0x08001079
 8000fa0:	08000ff7 	.word	0x08000ff7
 8000fa4:	08000ff7 	.word	0x08000ff7
 8000fa8:	08000ff7 	.word	0x08000ff7
 8000fac:	08000f45 	.word	0x08000f45
 8000fb0:	08001035 	.word	0x08001035
 8000fb4:	08000f45 	.word	0x08000f45
 8000fb8:	08000f45 	.word	0x08000f45
 8000fbc:	08000f45 	.word	0x08000f45
 8000fc0:	08000f45 	.word	0x08000f45
 8000fc4:	080010a3 	.word	0x080010a3
 8000fc8:	08001071 	.word	0x08001071
 8000fcc:	08001017 	.word	0x08001017
 8000fd0:	08000f45 	.word	0x08000f45
 8000fd4:	08000f45 	.word	0x08000f45
 8000fd8:	0800109f 	.word	0x0800109f
 8000fdc:	08000f45 	.word	0x08000f45
 8000fe0:	08001079 	.word	0x08001079
 8000fe4:	08000f45 	.word	0x08000f45
 8000fe8:	08000f45 	.word	0x08000f45
 8000fec:	0800101f 	.word	0x0800101f
 8000ff0:	3b45      	subs	r3, #69	; 0x45
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d8a6      	bhi.n	8000f44 <__ssvfiscanf_r+0xec>
 8000ff6:	2305      	movs	r3, #5
 8000ff8:	e01f      	b.n	800103a <__ssvfiscanf_r+0x1e2>
 8000ffa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8000ffc:	4621      	mov	r1, r4
 8000ffe:	4630      	mov	r0, r6
 8001000:	4798      	blx	r3
 8001002:	2800      	cmp	r0, #0
 8001004:	f43f af68 	beq.w	8000ed8 <__ssvfiscanf_r+0x80>
 8001008:	9844      	ldr	r0, [sp, #272]	; 0x110
 800100a:	2800      	cmp	r0, #0
 800100c:	f040 808d 	bne.w	800112a <__ssvfiscanf_r+0x2d2>
 8001010:	f04f 30ff 	mov.w	r0, #4294967295
 8001014:	e08f      	b.n	8001136 <__ssvfiscanf_r+0x2de>
 8001016:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8001018:	f042 0220 	orr.w	r2, r2, #32
 800101c:	9241      	str	r2, [sp, #260]	; 0x104
 800101e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8001020:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001024:	9241      	str	r2, [sp, #260]	; 0x104
 8001026:	2210      	movs	r2, #16
 8001028:	2b6f      	cmp	r3, #111	; 0x6f
 800102a:	9242      	str	r2, [sp, #264]	; 0x108
 800102c:	bf34      	ite	cc
 800102e:	2303      	movcc	r3, #3
 8001030:	2304      	movcs	r3, #4
 8001032:	e002      	b.n	800103a <__ssvfiscanf_r+0x1e2>
 8001034:	2300      	movs	r3, #0
 8001036:	9342      	str	r3, [sp, #264]	; 0x108
 8001038:	2303      	movs	r3, #3
 800103a:	9347      	str	r3, [sp, #284]	; 0x11c
 800103c:	6863      	ldr	r3, [r4, #4]
 800103e:	2b00      	cmp	r3, #0
 8001040:	dd3d      	ble.n	80010be <__ssvfiscanf_r+0x266>
 8001042:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8001044:	0659      	lsls	r1, r3, #25
 8001046:	d404      	bmi.n	8001052 <__ssvfiscanf_r+0x1fa>
 8001048:	6823      	ldr	r3, [r4, #0]
 800104a:	781a      	ldrb	r2, [r3, #0]
 800104c:	5cba      	ldrb	r2, [r7, r2]
 800104e:	0712      	lsls	r2, r2, #28
 8001050:	d43c      	bmi.n	80010cc <__ssvfiscanf_r+0x274>
 8001052:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8001054:	2b02      	cmp	r3, #2
 8001056:	dc4b      	bgt.n	80010f0 <__ssvfiscanf_r+0x298>
 8001058:	466b      	mov	r3, sp
 800105a:	4622      	mov	r2, r4
 800105c:	a941      	add	r1, sp, #260	; 0x104
 800105e:	4630      	mov	r0, r6
 8001060:	f000 f872 	bl	8001148 <_scanf_chars>
 8001064:	2801      	cmp	r0, #1
 8001066:	d06a      	beq.n	800113e <__ssvfiscanf_r+0x2e6>
 8001068:	2802      	cmp	r0, #2
 800106a:	f47f af1c 	bne.w	8000ea6 <__ssvfiscanf_r+0x4e>
 800106e:	e7cb      	b.n	8001008 <__ssvfiscanf_r+0x1b0>
 8001070:	2308      	movs	r3, #8
 8001072:	9342      	str	r3, [sp, #264]	; 0x108
 8001074:	2304      	movs	r3, #4
 8001076:	e7e0      	b.n	800103a <__ssvfiscanf_r+0x1e2>
 8001078:	220a      	movs	r2, #10
 800107a:	e7d5      	b.n	8001028 <__ssvfiscanf_r+0x1d0>
 800107c:	4629      	mov	r1, r5
 800107e:	4640      	mov	r0, r8
 8001080:	f000 f9b0 	bl	80013e4 <__sccl>
 8001084:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8001086:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800108a:	9341      	str	r3, [sp, #260]	; 0x104
 800108c:	4605      	mov	r5, r0
 800108e:	2301      	movs	r3, #1
 8001090:	e7d3      	b.n	800103a <__ssvfiscanf_r+0x1e2>
 8001092:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8001094:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001098:	9341      	str	r3, [sp, #260]	; 0x104
 800109a:	2300      	movs	r3, #0
 800109c:	e7cd      	b.n	800103a <__ssvfiscanf_r+0x1e2>
 800109e:	2302      	movs	r3, #2
 80010a0:	e7cb      	b.n	800103a <__ssvfiscanf_r+0x1e2>
 80010a2:	9841      	ldr	r0, [sp, #260]	; 0x104
 80010a4:	06c3      	lsls	r3, r0, #27
 80010a6:	f53f aefe 	bmi.w	8000ea6 <__ssvfiscanf_r+0x4e>
 80010aa:	9b00      	ldr	r3, [sp, #0]
 80010ac:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80010ae:	1d19      	adds	r1, r3, #4
 80010b0:	9100      	str	r1, [sp, #0]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	07c0      	lsls	r0, r0, #31
 80010b6:	bf4c      	ite	mi
 80010b8:	801a      	strhmi	r2, [r3, #0]
 80010ba:	601a      	strpl	r2, [r3, #0]
 80010bc:	e6f3      	b.n	8000ea6 <__ssvfiscanf_r+0x4e>
 80010be:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80010c0:	4621      	mov	r1, r4
 80010c2:	4630      	mov	r0, r6
 80010c4:	4798      	blx	r3
 80010c6:	2800      	cmp	r0, #0
 80010c8:	d0bb      	beq.n	8001042 <__ssvfiscanf_r+0x1ea>
 80010ca:	e79d      	b.n	8001008 <__ssvfiscanf_r+0x1b0>
 80010cc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80010ce:	3201      	adds	r2, #1
 80010d0:	9245      	str	r2, [sp, #276]	; 0x114
 80010d2:	6862      	ldr	r2, [r4, #4]
 80010d4:	3a01      	subs	r2, #1
 80010d6:	2a00      	cmp	r2, #0
 80010d8:	6062      	str	r2, [r4, #4]
 80010da:	dd02      	ble.n	80010e2 <__ssvfiscanf_r+0x28a>
 80010dc:	3301      	adds	r3, #1
 80010de:	6023      	str	r3, [r4, #0]
 80010e0:	e7b2      	b.n	8001048 <__ssvfiscanf_r+0x1f0>
 80010e2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80010e4:	4621      	mov	r1, r4
 80010e6:	4630      	mov	r0, r6
 80010e8:	4798      	blx	r3
 80010ea:	2800      	cmp	r0, #0
 80010ec:	d0ac      	beq.n	8001048 <__ssvfiscanf_r+0x1f0>
 80010ee:	e78b      	b.n	8001008 <__ssvfiscanf_r+0x1b0>
 80010f0:	2b04      	cmp	r3, #4
 80010f2:	dc0f      	bgt.n	8001114 <__ssvfiscanf_r+0x2bc>
 80010f4:	466b      	mov	r3, sp
 80010f6:	4622      	mov	r2, r4
 80010f8:	a941      	add	r1, sp, #260	; 0x104
 80010fa:	4630      	mov	r0, r6
 80010fc:	f000 f87e 	bl	80011fc <_scanf_i>
 8001100:	e7b0      	b.n	8001064 <__ssvfiscanf_r+0x20c>
 8001102:	bf00      	nop
 8001104:	08000da5 	.word	0x08000da5
 8001108:	08000e1f 	.word	0x08000e1f
 800110c:	0800173d 	.word	0x0800173d
 8001110:	0800183d 	.word	0x0800183d
 8001114:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <__ssvfiscanf_r+0x2ec>)
 8001116:	2b00      	cmp	r3, #0
 8001118:	f43f aec5 	beq.w	8000ea6 <__ssvfiscanf_r+0x4e>
 800111c:	466b      	mov	r3, sp
 800111e:	4622      	mov	r2, r4
 8001120:	a941      	add	r1, sp, #260	; 0x104
 8001122:	4630      	mov	r0, r6
 8001124:	f3af 8000 	nop.w
 8001128:	e79c      	b.n	8001064 <__ssvfiscanf_r+0x20c>
 800112a:	89a3      	ldrh	r3, [r4, #12]
 800112c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001130:	bf18      	it	ne
 8001132:	f04f 30ff 	movne.w	r0, #4294967295
 8001136:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800113a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800113e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8001140:	e7f9      	b.n	8001136 <__ssvfiscanf_r+0x2de>
 8001142:	bf00      	nop
 8001144:	00000000 	.word	0x00000000

08001148 <_scanf_chars>:
 8001148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800114c:	4615      	mov	r5, r2
 800114e:	688a      	ldr	r2, [r1, #8]
 8001150:	4680      	mov	r8, r0
 8001152:	460c      	mov	r4, r1
 8001154:	b932      	cbnz	r2, 8001164 <_scanf_chars+0x1c>
 8001156:	698a      	ldr	r2, [r1, #24]
 8001158:	2a00      	cmp	r2, #0
 800115a:	bf0c      	ite	eq
 800115c:	2201      	moveq	r2, #1
 800115e:	f04f 32ff 	movne.w	r2, #4294967295
 8001162:	608a      	str	r2, [r1, #8]
 8001164:	6822      	ldr	r2, [r4, #0]
 8001166:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80011f8 <_scanf_chars+0xb0>
 800116a:	06d1      	lsls	r1, r2, #27
 800116c:	bf5f      	itttt	pl
 800116e:	681a      	ldrpl	r2, [r3, #0]
 8001170:	1d11      	addpl	r1, r2, #4
 8001172:	6019      	strpl	r1, [r3, #0]
 8001174:	6816      	ldrpl	r6, [r2, #0]
 8001176:	2700      	movs	r7, #0
 8001178:	69a0      	ldr	r0, [r4, #24]
 800117a:	b188      	cbz	r0, 80011a0 <_scanf_chars+0x58>
 800117c:	2801      	cmp	r0, #1
 800117e:	d107      	bne.n	8001190 <_scanf_chars+0x48>
 8001180:	682a      	ldr	r2, [r5, #0]
 8001182:	7811      	ldrb	r1, [r2, #0]
 8001184:	6962      	ldr	r2, [r4, #20]
 8001186:	5c52      	ldrb	r2, [r2, r1]
 8001188:	b952      	cbnz	r2, 80011a0 <_scanf_chars+0x58>
 800118a:	2f00      	cmp	r7, #0
 800118c:	d031      	beq.n	80011f2 <_scanf_chars+0xaa>
 800118e:	e022      	b.n	80011d6 <_scanf_chars+0x8e>
 8001190:	2802      	cmp	r0, #2
 8001192:	d120      	bne.n	80011d6 <_scanf_chars+0x8e>
 8001194:	682b      	ldr	r3, [r5, #0]
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	f819 3003 	ldrb.w	r3, [r9, r3]
 800119c:	071b      	lsls	r3, r3, #28
 800119e:	d41a      	bmi.n	80011d6 <_scanf_chars+0x8e>
 80011a0:	6823      	ldr	r3, [r4, #0]
 80011a2:	06da      	lsls	r2, r3, #27
 80011a4:	bf5e      	ittt	pl
 80011a6:	682b      	ldrpl	r3, [r5, #0]
 80011a8:	781b      	ldrbpl	r3, [r3, #0]
 80011aa:	f806 3b01 	strbpl.w	r3, [r6], #1
 80011ae:	682a      	ldr	r2, [r5, #0]
 80011b0:	686b      	ldr	r3, [r5, #4]
 80011b2:	3201      	adds	r2, #1
 80011b4:	602a      	str	r2, [r5, #0]
 80011b6:	68a2      	ldr	r2, [r4, #8]
 80011b8:	3b01      	subs	r3, #1
 80011ba:	3a01      	subs	r2, #1
 80011bc:	606b      	str	r3, [r5, #4]
 80011be:	3701      	adds	r7, #1
 80011c0:	60a2      	str	r2, [r4, #8]
 80011c2:	b142      	cbz	r2, 80011d6 <_scanf_chars+0x8e>
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	dcd7      	bgt.n	8001178 <_scanf_chars+0x30>
 80011c8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80011cc:	4629      	mov	r1, r5
 80011ce:	4640      	mov	r0, r8
 80011d0:	4798      	blx	r3
 80011d2:	2800      	cmp	r0, #0
 80011d4:	d0d0      	beq.n	8001178 <_scanf_chars+0x30>
 80011d6:	6823      	ldr	r3, [r4, #0]
 80011d8:	f013 0310 	ands.w	r3, r3, #16
 80011dc:	d105      	bne.n	80011ea <_scanf_chars+0xa2>
 80011de:	68e2      	ldr	r2, [r4, #12]
 80011e0:	3201      	adds	r2, #1
 80011e2:	60e2      	str	r2, [r4, #12]
 80011e4:	69a2      	ldr	r2, [r4, #24]
 80011e6:	b102      	cbz	r2, 80011ea <_scanf_chars+0xa2>
 80011e8:	7033      	strb	r3, [r6, #0]
 80011ea:	6923      	ldr	r3, [r4, #16]
 80011ec:	443b      	add	r3, r7
 80011ee:	6123      	str	r3, [r4, #16]
 80011f0:	2000      	movs	r0, #0
 80011f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80011f6:	bf00      	nop
 80011f8:	0800173d 	.word	0x0800173d

080011fc <_scanf_i>:
 80011fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001200:	4698      	mov	r8, r3
 8001202:	4b74      	ldr	r3, [pc, #464]	; (80013d4 <_scanf_i+0x1d8>)
 8001204:	460c      	mov	r4, r1
 8001206:	4682      	mov	sl, r0
 8001208:	4616      	mov	r6, r2
 800120a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800120e:	b087      	sub	sp, #28
 8001210:	ab03      	add	r3, sp, #12
 8001212:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001216:	4b70      	ldr	r3, [pc, #448]	; (80013d8 <_scanf_i+0x1dc>)
 8001218:	69a1      	ldr	r1, [r4, #24]
 800121a:	4a70      	ldr	r2, [pc, #448]	; (80013dc <_scanf_i+0x1e0>)
 800121c:	2903      	cmp	r1, #3
 800121e:	bf18      	it	ne
 8001220:	461a      	movne	r2, r3
 8001222:	68a3      	ldr	r3, [r4, #8]
 8001224:	9201      	str	r2, [sp, #4]
 8001226:	1e5a      	subs	r2, r3, #1
 8001228:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800122c:	bf88      	it	hi
 800122e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8001232:	4627      	mov	r7, r4
 8001234:	bf82      	ittt	hi
 8001236:	eb03 0905 	addhi.w	r9, r3, r5
 800123a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800123e:	60a3      	strhi	r3, [r4, #8]
 8001240:	f857 3b1c 	ldr.w	r3, [r7], #28
 8001244:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8001248:	bf98      	it	ls
 800124a:	f04f 0900 	movls.w	r9, #0
 800124e:	6023      	str	r3, [r4, #0]
 8001250:	463d      	mov	r5, r7
 8001252:	f04f 0b00 	mov.w	fp, #0
 8001256:	6831      	ldr	r1, [r6, #0]
 8001258:	ab03      	add	r3, sp, #12
 800125a:	7809      	ldrb	r1, [r1, #0]
 800125c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8001260:	2202      	movs	r2, #2
 8001262:	f7fe ffcd 	bl	8000200 <memchr>
 8001266:	b328      	cbz	r0, 80012b4 <_scanf_i+0xb8>
 8001268:	f1bb 0f01 	cmp.w	fp, #1
 800126c:	d159      	bne.n	8001322 <_scanf_i+0x126>
 800126e:	6862      	ldr	r2, [r4, #4]
 8001270:	b92a      	cbnz	r2, 800127e <_scanf_i+0x82>
 8001272:	6822      	ldr	r2, [r4, #0]
 8001274:	2308      	movs	r3, #8
 8001276:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800127a:	6063      	str	r3, [r4, #4]
 800127c:	6022      	str	r2, [r4, #0]
 800127e:	6822      	ldr	r2, [r4, #0]
 8001280:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8001284:	6022      	str	r2, [r4, #0]
 8001286:	68a2      	ldr	r2, [r4, #8]
 8001288:	1e51      	subs	r1, r2, #1
 800128a:	60a1      	str	r1, [r4, #8]
 800128c:	b192      	cbz	r2, 80012b4 <_scanf_i+0xb8>
 800128e:	6832      	ldr	r2, [r6, #0]
 8001290:	1c51      	adds	r1, r2, #1
 8001292:	6031      	str	r1, [r6, #0]
 8001294:	7812      	ldrb	r2, [r2, #0]
 8001296:	f805 2b01 	strb.w	r2, [r5], #1
 800129a:	6872      	ldr	r2, [r6, #4]
 800129c:	3a01      	subs	r2, #1
 800129e:	2a00      	cmp	r2, #0
 80012a0:	6072      	str	r2, [r6, #4]
 80012a2:	dc07      	bgt.n	80012b4 <_scanf_i+0xb8>
 80012a4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80012a8:	4631      	mov	r1, r6
 80012aa:	4650      	mov	r0, sl
 80012ac:	4790      	blx	r2
 80012ae:	2800      	cmp	r0, #0
 80012b0:	f040 8085 	bne.w	80013be <_scanf_i+0x1c2>
 80012b4:	f10b 0b01 	add.w	fp, fp, #1
 80012b8:	f1bb 0f03 	cmp.w	fp, #3
 80012bc:	d1cb      	bne.n	8001256 <_scanf_i+0x5a>
 80012be:	6863      	ldr	r3, [r4, #4]
 80012c0:	b90b      	cbnz	r3, 80012c6 <_scanf_i+0xca>
 80012c2:	230a      	movs	r3, #10
 80012c4:	6063      	str	r3, [r4, #4]
 80012c6:	6863      	ldr	r3, [r4, #4]
 80012c8:	4945      	ldr	r1, [pc, #276]	; (80013e0 <_scanf_i+0x1e4>)
 80012ca:	6960      	ldr	r0, [r4, #20]
 80012cc:	1ac9      	subs	r1, r1, r3
 80012ce:	f000 f889 	bl	80013e4 <__sccl>
 80012d2:	f04f 0b00 	mov.w	fp, #0
 80012d6:	68a3      	ldr	r3, [r4, #8]
 80012d8:	6822      	ldr	r2, [r4, #0]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d03d      	beq.n	800135a <_scanf_i+0x15e>
 80012de:	6831      	ldr	r1, [r6, #0]
 80012e0:	6960      	ldr	r0, [r4, #20]
 80012e2:	f891 c000 	ldrb.w	ip, [r1]
 80012e6:	f810 000c 	ldrb.w	r0, [r0, ip]
 80012ea:	2800      	cmp	r0, #0
 80012ec:	d035      	beq.n	800135a <_scanf_i+0x15e>
 80012ee:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80012f2:	d124      	bne.n	800133e <_scanf_i+0x142>
 80012f4:	0510      	lsls	r0, r2, #20
 80012f6:	d522      	bpl.n	800133e <_scanf_i+0x142>
 80012f8:	f10b 0b01 	add.w	fp, fp, #1
 80012fc:	f1b9 0f00 	cmp.w	r9, #0
 8001300:	d003      	beq.n	800130a <_scanf_i+0x10e>
 8001302:	3301      	adds	r3, #1
 8001304:	f109 39ff 	add.w	r9, r9, #4294967295
 8001308:	60a3      	str	r3, [r4, #8]
 800130a:	6873      	ldr	r3, [r6, #4]
 800130c:	3b01      	subs	r3, #1
 800130e:	2b00      	cmp	r3, #0
 8001310:	6073      	str	r3, [r6, #4]
 8001312:	dd1b      	ble.n	800134c <_scanf_i+0x150>
 8001314:	6833      	ldr	r3, [r6, #0]
 8001316:	3301      	adds	r3, #1
 8001318:	6033      	str	r3, [r6, #0]
 800131a:	68a3      	ldr	r3, [r4, #8]
 800131c:	3b01      	subs	r3, #1
 800131e:	60a3      	str	r3, [r4, #8]
 8001320:	e7d9      	b.n	80012d6 <_scanf_i+0xda>
 8001322:	f1bb 0f02 	cmp.w	fp, #2
 8001326:	d1ae      	bne.n	8001286 <_scanf_i+0x8a>
 8001328:	6822      	ldr	r2, [r4, #0]
 800132a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800132e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8001332:	d1bf      	bne.n	80012b4 <_scanf_i+0xb8>
 8001334:	2310      	movs	r3, #16
 8001336:	6063      	str	r3, [r4, #4]
 8001338:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800133c:	e7a2      	b.n	8001284 <_scanf_i+0x88>
 800133e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8001342:	6022      	str	r2, [r4, #0]
 8001344:	780b      	ldrb	r3, [r1, #0]
 8001346:	f805 3b01 	strb.w	r3, [r5], #1
 800134a:	e7de      	b.n	800130a <_scanf_i+0x10e>
 800134c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8001350:	4631      	mov	r1, r6
 8001352:	4650      	mov	r0, sl
 8001354:	4798      	blx	r3
 8001356:	2800      	cmp	r0, #0
 8001358:	d0df      	beq.n	800131a <_scanf_i+0x11e>
 800135a:	6823      	ldr	r3, [r4, #0]
 800135c:	05d9      	lsls	r1, r3, #23
 800135e:	d50d      	bpl.n	800137c <_scanf_i+0x180>
 8001360:	42bd      	cmp	r5, r7
 8001362:	d909      	bls.n	8001378 <_scanf_i+0x17c>
 8001364:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8001368:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800136c:	4632      	mov	r2, r6
 800136e:	4650      	mov	r0, sl
 8001370:	4798      	blx	r3
 8001372:	f105 39ff 	add.w	r9, r5, #4294967295
 8001376:	464d      	mov	r5, r9
 8001378:	42bd      	cmp	r5, r7
 800137a:	d028      	beq.n	80013ce <_scanf_i+0x1d2>
 800137c:	6822      	ldr	r2, [r4, #0]
 800137e:	f012 0210 	ands.w	r2, r2, #16
 8001382:	d113      	bne.n	80013ac <_scanf_i+0x1b0>
 8001384:	702a      	strb	r2, [r5, #0]
 8001386:	6863      	ldr	r3, [r4, #4]
 8001388:	9e01      	ldr	r6, [sp, #4]
 800138a:	4639      	mov	r1, r7
 800138c:	4650      	mov	r0, sl
 800138e:	47b0      	blx	r6
 8001390:	f8d8 3000 	ldr.w	r3, [r8]
 8001394:	6821      	ldr	r1, [r4, #0]
 8001396:	1d1a      	adds	r2, r3, #4
 8001398:	f8c8 2000 	str.w	r2, [r8]
 800139c:	f011 0f20 	tst.w	r1, #32
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	d00f      	beq.n	80013c4 <_scanf_i+0x1c8>
 80013a4:	6018      	str	r0, [r3, #0]
 80013a6:	68e3      	ldr	r3, [r4, #12]
 80013a8:	3301      	adds	r3, #1
 80013aa:	60e3      	str	r3, [r4, #12]
 80013ac:	6923      	ldr	r3, [r4, #16]
 80013ae:	1bed      	subs	r5, r5, r7
 80013b0:	445d      	add	r5, fp
 80013b2:	442b      	add	r3, r5
 80013b4:	6123      	str	r3, [r4, #16]
 80013b6:	2000      	movs	r0, #0
 80013b8:	b007      	add	sp, #28
 80013ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80013be:	f04f 0b00 	mov.w	fp, #0
 80013c2:	e7ca      	b.n	800135a <_scanf_i+0x15e>
 80013c4:	07ca      	lsls	r2, r1, #31
 80013c6:	bf4c      	ite	mi
 80013c8:	8018      	strhmi	r0, [r3, #0]
 80013ca:	6018      	strpl	r0, [r3, #0]
 80013cc:	e7eb      	b.n	80013a6 <_scanf_i+0x1aa>
 80013ce:	2001      	movs	r0, #1
 80013d0:	e7f2      	b.n	80013b8 <_scanf_i+0x1bc>
 80013d2:	bf00      	nop
 80013d4:	08001730 	.word	0x08001730
 80013d8:	08000ae5 	.word	0x08000ae5
 80013dc:	0800166d 	.word	0x0800166d
 80013e0:	08001851 	.word	0x08001851

080013e4 <__sccl>:
 80013e4:	b570      	push	{r4, r5, r6, lr}
 80013e6:	780b      	ldrb	r3, [r1, #0]
 80013e8:	4604      	mov	r4, r0
 80013ea:	2b5e      	cmp	r3, #94	; 0x5e
 80013ec:	bf0b      	itete	eq
 80013ee:	784b      	ldrbeq	r3, [r1, #1]
 80013f0:	1c4a      	addne	r2, r1, #1
 80013f2:	1c8a      	addeq	r2, r1, #2
 80013f4:	2100      	movne	r1, #0
 80013f6:	bf08      	it	eq
 80013f8:	2101      	moveq	r1, #1
 80013fa:	3801      	subs	r0, #1
 80013fc:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8001400:	f800 1f01 	strb.w	r1, [r0, #1]!
 8001404:	42a8      	cmp	r0, r5
 8001406:	d1fb      	bne.n	8001400 <__sccl+0x1c>
 8001408:	b90b      	cbnz	r3, 800140e <__sccl+0x2a>
 800140a:	1e50      	subs	r0, r2, #1
 800140c:	bd70      	pop	{r4, r5, r6, pc}
 800140e:	f081 0101 	eor.w	r1, r1, #1
 8001412:	54e1      	strb	r1, [r4, r3]
 8001414:	4610      	mov	r0, r2
 8001416:	4602      	mov	r2, r0
 8001418:	f812 5b01 	ldrb.w	r5, [r2], #1
 800141c:	2d2d      	cmp	r5, #45	; 0x2d
 800141e:	d005      	beq.n	800142c <__sccl+0x48>
 8001420:	2d5d      	cmp	r5, #93	; 0x5d
 8001422:	d016      	beq.n	8001452 <__sccl+0x6e>
 8001424:	2d00      	cmp	r5, #0
 8001426:	d0f1      	beq.n	800140c <__sccl+0x28>
 8001428:	462b      	mov	r3, r5
 800142a:	e7f2      	b.n	8001412 <__sccl+0x2e>
 800142c:	7846      	ldrb	r6, [r0, #1]
 800142e:	2e5d      	cmp	r6, #93	; 0x5d
 8001430:	d0fa      	beq.n	8001428 <__sccl+0x44>
 8001432:	42b3      	cmp	r3, r6
 8001434:	dcf8      	bgt.n	8001428 <__sccl+0x44>
 8001436:	3002      	adds	r0, #2
 8001438:	461a      	mov	r2, r3
 800143a:	3201      	adds	r2, #1
 800143c:	4296      	cmp	r6, r2
 800143e:	54a1      	strb	r1, [r4, r2]
 8001440:	dcfb      	bgt.n	800143a <__sccl+0x56>
 8001442:	1af2      	subs	r2, r6, r3
 8001444:	3a01      	subs	r2, #1
 8001446:	1c5d      	adds	r5, r3, #1
 8001448:	42b3      	cmp	r3, r6
 800144a:	bfa8      	it	ge
 800144c:	2200      	movge	r2, #0
 800144e:	18ab      	adds	r3, r5, r2
 8001450:	e7e1      	b.n	8001416 <__sccl+0x32>
 8001452:	4610      	mov	r0, r2
 8001454:	e7da      	b.n	800140c <__sccl+0x28>

08001456 <__submore>:
 8001456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800145a:	460c      	mov	r4, r1
 800145c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800145e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001462:	4299      	cmp	r1, r3
 8001464:	d11d      	bne.n	80014a2 <__submore+0x4c>
 8001466:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800146a:	f7ff fc0f 	bl	8000c8c <_malloc_r>
 800146e:	b918      	cbnz	r0, 8001478 <__submore+0x22>
 8001470:	f04f 30ff 	mov.w	r0, #4294967295
 8001474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001478:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800147c:	63a3      	str	r3, [r4, #56]	; 0x38
 800147e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8001482:	6360      	str	r0, [r4, #52]	; 0x34
 8001484:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8001488:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800148c:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8001490:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001494:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8001498:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800149c:	6020      	str	r0, [r4, #0]
 800149e:	2000      	movs	r0, #0
 80014a0:	e7e8      	b.n	8001474 <__submore+0x1e>
 80014a2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80014a4:	0077      	lsls	r7, r6, #1
 80014a6:	463a      	mov	r2, r7
 80014a8:	f000 f82e 	bl	8001508 <_realloc_r>
 80014ac:	4605      	mov	r5, r0
 80014ae:	2800      	cmp	r0, #0
 80014b0:	d0de      	beq.n	8001470 <__submore+0x1a>
 80014b2:	eb00 0806 	add.w	r8, r0, r6
 80014b6:	4601      	mov	r1, r0
 80014b8:	4632      	mov	r2, r6
 80014ba:	4640      	mov	r0, r8
 80014bc:	f000 f816 	bl	80014ec <memcpy>
 80014c0:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80014c4:	f8c4 8000 	str.w	r8, [r4]
 80014c8:	e7e9      	b.n	800149e <__submore+0x48>
	...

080014cc <_sbrk_r>:
 80014cc:	b538      	push	{r3, r4, r5, lr}
 80014ce:	4d06      	ldr	r5, [pc, #24]	; (80014e8 <_sbrk_r+0x1c>)
 80014d0:	2300      	movs	r3, #0
 80014d2:	4604      	mov	r4, r0
 80014d4:	4608      	mov	r0, r1
 80014d6:	602b      	str	r3, [r5, #0]
 80014d8:	f000 f8d8 	bl	800168c <_sbrk>
 80014dc:	1c43      	adds	r3, r0, #1
 80014de:	d102      	bne.n	80014e6 <_sbrk_r+0x1a>
 80014e0:	682b      	ldr	r3, [r5, #0]
 80014e2:	b103      	cbz	r3, 80014e6 <_sbrk_r+0x1a>
 80014e4:	6023      	str	r3, [r4, #0]
 80014e6:	bd38      	pop	{r3, r4, r5, pc}
 80014e8:	200002ac 	.word	0x200002ac

080014ec <memcpy>:
 80014ec:	440a      	add	r2, r1
 80014ee:	4291      	cmp	r1, r2
 80014f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80014f4:	d100      	bne.n	80014f8 <memcpy+0xc>
 80014f6:	4770      	bx	lr
 80014f8:	b510      	push	{r4, lr}
 80014fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80014fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001502:	4291      	cmp	r1, r2
 8001504:	d1f9      	bne.n	80014fa <memcpy+0xe>
 8001506:	bd10      	pop	{r4, pc}

08001508 <_realloc_r>:
 8001508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800150c:	4680      	mov	r8, r0
 800150e:	4614      	mov	r4, r2
 8001510:	460e      	mov	r6, r1
 8001512:	b921      	cbnz	r1, 800151e <_realloc_r+0x16>
 8001514:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001518:	4611      	mov	r1, r2
 800151a:	f7ff bbb7 	b.w	8000c8c <_malloc_r>
 800151e:	b92a      	cbnz	r2, 800152c <_realloc_r+0x24>
 8001520:	f7ff fb48 	bl	8000bb4 <_free_r>
 8001524:	4625      	mov	r5, r4
 8001526:	4628      	mov	r0, r5
 8001528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800152c:	f000 f8a6 	bl	800167c <_malloc_usable_size_r>
 8001530:	4284      	cmp	r4, r0
 8001532:	4607      	mov	r7, r0
 8001534:	d802      	bhi.n	800153c <_realloc_r+0x34>
 8001536:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800153a:	d812      	bhi.n	8001562 <_realloc_r+0x5a>
 800153c:	4621      	mov	r1, r4
 800153e:	4640      	mov	r0, r8
 8001540:	f7ff fba4 	bl	8000c8c <_malloc_r>
 8001544:	4605      	mov	r5, r0
 8001546:	2800      	cmp	r0, #0
 8001548:	d0ed      	beq.n	8001526 <_realloc_r+0x1e>
 800154a:	42bc      	cmp	r4, r7
 800154c:	4622      	mov	r2, r4
 800154e:	4631      	mov	r1, r6
 8001550:	bf28      	it	cs
 8001552:	463a      	movcs	r2, r7
 8001554:	f7ff ffca 	bl	80014ec <memcpy>
 8001558:	4631      	mov	r1, r6
 800155a:	4640      	mov	r0, r8
 800155c:	f7ff fb2a 	bl	8000bb4 <_free_r>
 8001560:	e7e1      	b.n	8001526 <_realloc_r+0x1e>
 8001562:	4635      	mov	r5, r6
 8001564:	e7df      	b.n	8001526 <_realloc_r+0x1e>
	...

08001568 <_strtol_l.constprop.0>:
 8001568:	2b01      	cmp	r3, #1
 800156a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800156e:	d001      	beq.n	8001574 <_strtol_l.constprop.0+0xc>
 8001570:	2b24      	cmp	r3, #36	; 0x24
 8001572:	d906      	bls.n	8001582 <_strtol_l.constprop.0+0x1a>
 8001574:	f000 f87c 	bl	8001670 <__errno>
 8001578:	2316      	movs	r3, #22
 800157a:	6003      	str	r3, [r0, #0]
 800157c:	2000      	movs	r0, #0
 800157e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001582:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8001668 <_strtol_l.constprop.0+0x100>
 8001586:	460d      	mov	r5, r1
 8001588:	462e      	mov	r6, r5
 800158a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800158e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8001592:	f017 0708 	ands.w	r7, r7, #8
 8001596:	d1f7      	bne.n	8001588 <_strtol_l.constprop.0+0x20>
 8001598:	2c2d      	cmp	r4, #45	; 0x2d
 800159a:	d132      	bne.n	8001602 <_strtol_l.constprop.0+0x9a>
 800159c:	782c      	ldrb	r4, [r5, #0]
 800159e:	2701      	movs	r7, #1
 80015a0:	1cb5      	adds	r5, r6, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d05b      	beq.n	800165e <_strtol_l.constprop.0+0xf6>
 80015a6:	2b10      	cmp	r3, #16
 80015a8:	d109      	bne.n	80015be <_strtol_l.constprop.0+0x56>
 80015aa:	2c30      	cmp	r4, #48	; 0x30
 80015ac:	d107      	bne.n	80015be <_strtol_l.constprop.0+0x56>
 80015ae:	782c      	ldrb	r4, [r5, #0]
 80015b0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80015b4:	2c58      	cmp	r4, #88	; 0x58
 80015b6:	d14d      	bne.n	8001654 <_strtol_l.constprop.0+0xec>
 80015b8:	786c      	ldrb	r4, [r5, #1]
 80015ba:	2310      	movs	r3, #16
 80015bc:	3502      	adds	r5, #2
 80015be:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80015c2:	f108 38ff 	add.w	r8, r8, #4294967295
 80015c6:	f04f 0e00 	mov.w	lr, #0
 80015ca:	fbb8 f9f3 	udiv	r9, r8, r3
 80015ce:	4676      	mov	r6, lr
 80015d0:	fb03 8a19 	mls	sl, r3, r9, r8
 80015d4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80015d8:	f1bc 0f09 	cmp.w	ip, #9
 80015dc:	d816      	bhi.n	800160c <_strtol_l.constprop.0+0xa4>
 80015de:	4664      	mov	r4, ip
 80015e0:	42a3      	cmp	r3, r4
 80015e2:	dd24      	ble.n	800162e <_strtol_l.constprop.0+0xc6>
 80015e4:	f1be 3fff 	cmp.w	lr, #4294967295
 80015e8:	d008      	beq.n	80015fc <_strtol_l.constprop.0+0x94>
 80015ea:	45b1      	cmp	r9, r6
 80015ec:	d31c      	bcc.n	8001628 <_strtol_l.constprop.0+0xc0>
 80015ee:	d101      	bne.n	80015f4 <_strtol_l.constprop.0+0x8c>
 80015f0:	45a2      	cmp	sl, r4
 80015f2:	db19      	blt.n	8001628 <_strtol_l.constprop.0+0xc0>
 80015f4:	fb06 4603 	mla	r6, r6, r3, r4
 80015f8:	f04f 0e01 	mov.w	lr, #1
 80015fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001600:	e7e8      	b.n	80015d4 <_strtol_l.constprop.0+0x6c>
 8001602:	2c2b      	cmp	r4, #43	; 0x2b
 8001604:	bf04      	itt	eq
 8001606:	782c      	ldrbeq	r4, [r5, #0]
 8001608:	1cb5      	addeq	r5, r6, #2
 800160a:	e7ca      	b.n	80015a2 <_strtol_l.constprop.0+0x3a>
 800160c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8001610:	f1bc 0f19 	cmp.w	ip, #25
 8001614:	d801      	bhi.n	800161a <_strtol_l.constprop.0+0xb2>
 8001616:	3c37      	subs	r4, #55	; 0x37
 8001618:	e7e2      	b.n	80015e0 <_strtol_l.constprop.0+0x78>
 800161a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800161e:	f1bc 0f19 	cmp.w	ip, #25
 8001622:	d804      	bhi.n	800162e <_strtol_l.constprop.0+0xc6>
 8001624:	3c57      	subs	r4, #87	; 0x57
 8001626:	e7db      	b.n	80015e0 <_strtol_l.constprop.0+0x78>
 8001628:	f04f 3eff 	mov.w	lr, #4294967295
 800162c:	e7e6      	b.n	80015fc <_strtol_l.constprop.0+0x94>
 800162e:	f1be 3fff 	cmp.w	lr, #4294967295
 8001632:	d105      	bne.n	8001640 <_strtol_l.constprop.0+0xd8>
 8001634:	2322      	movs	r3, #34	; 0x22
 8001636:	6003      	str	r3, [r0, #0]
 8001638:	4646      	mov	r6, r8
 800163a:	b942      	cbnz	r2, 800164e <_strtol_l.constprop.0+0xe6>
 800163c:	4630      	mov	r0, r6
 800163e:	e79e      	b.n	800157e <_strtol_l.constprop.0+0x16>
 8001640:	b107      	cbz	r7, 8001644 <_strtol_l.constprop.0+0xdc>
 8001642:	4276      	negs	r6, r6
 8001644:	2a00      	cmp	r2, #0
 8001646:	d0f9      	beq.n	800163c <_strtol_l.constprop.0+0xd4>
 8001648:	f1be 0f00 	cmp.w	lr, #0
 800164c:	d000      	beq.n	8001650 <_strtol_l.constprop.0+0xe8>
 800164e:	1e69      	subs	r1, r5, #1
 8001650:	6011      	str	r1, [r2, #0]
 8001652:	e7f3      	b.n	800163c <_strtol_l.constprop.0+0xd4>
 8001654:	2430      	movs	r4, #48	; 0x30
 8001656:	2b00      	cmp	r3, #0
 8001658:	d1b1      	bne.n	80015be <_strtol_l.constprop.0+0x56>
 800165a:	2308      	movs	r3, #8
 800165c:	e7af      	b.n	80015be <_strtol_l.constprop.0+0x56>
 800165e:	2c30      	cmp	r4, #48	; 0x30
 8001660:	d0a5      	beq.n	80015ae <_strtol_l.constprop.0+0x46>
 8001662:	230a      	movs	r3, #10
 8001664:	e7ab      	b.n	80015be <_strtol_l.constprop.0+0x56>
 8001666:	bf00      	nop
 8001668:	0800173d 	.word	0x0800173d

0800166c <_strtol_r>:
 800166c:	f7ff bf7c 	b.w	8001568 <_strtol_l.constprop.0>

08001670 <__errno>:
 8001670:	4b01      	ldr	r3, [pc, #4]	; (8001678 <__errno+0x8>)
 8001672:	6818      	ldr	r0, [r3, #0]
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	20000154 	.word	0x20000154

0800167c <_malloc_usable_size_r>:
 800167c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001680:	1f18      	subs	r0, r3, #4
 8001682:	2b00      	cmp	r3, #0
 8001684:	bfbc      	itt	lt
 8001686:	580b      	ldrlt	r3, [r1, r0]
 8001688:	18c0      	addlt	r0, r0, r3
 800168a:	4770      	bx	lr

0800168c <_sbrk>:
 800168c:	4a04      	ldr	r2, [pc, #16]	; (80016a0 <_sbrk+0x14>)
 800168e:	6811      	ldr	r1, [r2, #0]
 8001690:	4603      	mov	r3, r0
 8001692:	b909      	cbnz	r1, 8001698 <_sbrk+0xc>
 8001694:	4903      	ldr	r1, [pc, #12]	; (80016a4 <_sbrk+0x18>)
 8001696:	6011      	str	r1, [r2, #0]
 8001698:	6810      	ldr	r0, [r2, #0]
 800169a:	4403      	add	r3, r0
 800169c:	6013      	str	r3, [r2, #0]
 800169e:	4770      	bx	lr
 80016a0:	200002bc 	.word	0x200002bc
 80016a4:	200002c0 	.word	0x200002c0

080016a8 <_init>:
 80016a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016aa:	bf00      	nop
 80016ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016ae:	bc08      	pop	{r3}
 80016b0:	469e      	mov	lr, r3
 80016b2:	4770      	bx	lr

080016b4 <_fini>:
 80016b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016b6:	bf00      	nop
 80016b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016ba:	bc08      	pop	{r3}
 80016bc:	469e      	mov	lr, r3
 80016be:	4770      	bx	lr
