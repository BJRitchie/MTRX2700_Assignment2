
task_3_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003c4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000558  08000558  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000558  08000558  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  08000558  08000558  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000558  08000558  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000558  08000558  00010558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800055c  0800055c  0001055c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08000560  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020028  2**0
                  CONTENTS
 10 .bss          0000001c  20000028  20000028  00020028  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000044  20000044  00020028  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000f28  00000000  00000000  0002009b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000482  00000000  00000000  00020fc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000000f0  00000000  00000000  00021448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000a0  00000000  00000000  00021538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00014e37  00000000  00000000  000215d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000119f  00000000  00000000  0003640f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000727b2  00000000  00000000  000375ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000002a8  00000000  00000000  000a9d60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007d  00000000  00000000  000aa008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000028 	.word	0x20000028
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000540 	.word	0x08000540

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000002c 	.word	0x2000002c
 80001d0:	08000540 	.word	0x08000540

080001d4 <initialise_board>:
#include "initialise.h"
#include "stm32f303xc.h"

// code from lecture example W05-C-interrupt by Dr Stewart Worrall
// initialise the discovery board I/O (just outputs: inputs are selected by default)
void initialise_board() {
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 80001da:	4b06      	ldr	r3, [pc, #24]	; (80001f4 <initialise_board+0x20>)
 80001dc:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555;
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	f245 5255 	movw	r2, #21845	; 0x5555
 80001e4:	801a      	strh	r2, [r3, #0]
}
 80001e6:	bf00      	nop
 80001e8:	370c      	adds	r7, #12
 80001ea:	46bd      	mov	sp, r7
 80001ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f0:	4770      	bx	lr
 80001f2:	bf00      	nop
 80001f4:	48001002 	.word	0x48001002

080001f8 <enable_clocks>:

// code from lecture example W05-C-interrupt by Dr Stewart Worrall
// enable the clocks for desired peripherals (GPIOA, C and E)
void enable_clocks() {
 80001f8:	b480      	push	{r7}
 80001fa:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 80001fc:	4b05      	ldr	r3, [pc, #20]	; (8000214 <enable_clocks+0x1c>)
 80001fe:	695b      	ldr	r3, [r3, #20]
 8000200:	4a04      	ldr	r2, [pc, #16]	; (8000214 <enable_clocks+0x1c>)
 8000202:	f443 1328 	orr.w	r3, r3, #2752512	; 0x2a0000
 8000206:	6153      	str	r3, [r2, #20]
}
 8000208:	bf00      	nop
 800020a:	46bd      	mov	sp, r7
 800020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	40021000 	.word	0x40021000

08000218 <one_shot>:

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void one_shot(void) {
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
	uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 800021e:	4b05      	ldr	r3, [pc, #20]	; (8000234 <one_shot+0x1c>)
 8000220:	607b      	str	r3, [r7, #4]
	*led_register = 0xFF;
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	22ff      	movs	r2, #255	; 0xff
 8000226:	701a      	strb	r2, [r3, #0]
}
 8000228:	bf00      	nop
 800022a:	370c      	adds	r7, #12
 800022c:	46bd      	mov	sp, r7
 800022e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000232:	4770      	bx	lr
 8000234:	48001015 	.word	0x48001015

08000238 <main>:

int main(void) {
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
	// enable components
	enable_clocks();
 800023c:	f7ff ffdc 	bl	80001f8 <enable_clocks>
	initialise_board();
 8000240:	f7ff ffc8 	bl	80001d4 <initialise_board>
	enable_timer_interrupt();
 8000244:	f000 f8be 	bl	80003c4 <enable_timer_interrupt>

//	setPeriod(&TIM2_init, 1000000);
	TimerInitialise(&TIM2_init, 0x00);
 8000248:	2100      	movs	r1, #0
 800024a:	4804      	ldr	r0, [pc, #16]	; (800025c <main+0x24>)
 800024c:	f000 f854 	bl	80002f8 <TimerInitialise>
	set_one_shot_mode(&TIM2_init, 1000000, &one_shot);
 8000250:	4a03      	ldr	r2, [pc, #12]	; (8000260 <main+0x28>)
 8000252:	4904      	ldr	r1, [pc, #16]	; (8000264 <main+0x2c>)
 8000254:	4801      	ldr	r0, [pc, #4]	; (800025c <main+0x24>)
 8000256:	f000 f910 	bl	800047a <set_one_shot_mode>

    /* Loop forever */
	for(;;);
 800025a:	e7fe      	b.n	800025a <main+0x22>
 800025c:	20000000 	.word	0x20000000
 8000260:	08000219 	.word	0x08000219
 8000264:	000f4240 	.word	0x000f4240

08000268 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000268:	b480      	push	{r7}
 800026a:	b083      	sub	sp, #12
 800026c:	af00      	add	r7, sp, #0
 800026e:	4603      	mov	r3, r0
 8000270:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000276:	2b00      	cmp	r3, #0
 8000278:	db0b      	blt.n	8000292 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	f003 021f 	and.w	r2, r3, #31
 8000280:	4907      	ldr	r1, [pc, #28]	; (80002a0 <__NVIC_EnableIRQ+0x38>)
 8000282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000286:	095b      	lsrs	r3, r3, #5
 8000288:	2001      	movs	r0, #1
 800028a:	fa00 f202 	lsl.w	r2, r0, r2
 800028e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000292:	bf00      	nop
 8000294:	370c      	adds	r7, #12
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	e000e100 	.word	0xe000e100

080002a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	6039      	str	r1, [r7, #0]
 80002ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	db0a      	blt.n	80002ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b8:	683b      	ldr	r3, [r7, #0]
 80002ba:	b2da      	uxtb	r2, r3
 80002bc:	490c      	ldr	r1, [pc, #48]	; (80002f0 <__NVIC_SetPriority+0x4c>)
 80002be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c2:	0112      	lsls	r2, r2, #4
 80002c4:	b2d2      	uxtb	r2, r2
 80002c6:	440b      	add	r3, r1
 80002c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002cc:	e00a      	b.n	80002e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ce:	683b      	ldr	r3, [r7, #0]
 80002d0:	b2da      	uxtb	r2, r3
 80002d2:	4908      	ldr	r1, [pc, #32]	; (80002f4 <__NVIC_SetPriority+0x50>)
 80002d4:	79fb      	ldrb	r3, [r7, #7]
 80002d6:	f003 030f 	and.w	r3, r3, #15
 80002da:	3b04      	subs	r3, #4
 80002dc:	0112      	lsls	r2, r2, #4
 80002de:	b2d2      	uxtb	r2, r2
 80002e0:	440b      	add	r3, r1
 80002e2:	761a      	strb	r2, [r3, #24]
}
 80002e4:	bf00      	nop
 80002e6:	370c      	adds	r7, #12
 80002e8:	46bd      	mov	sp, r7
 80002ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ee:	4770      	bx	lr
 80002f0:	e000e100 	.word	0xe000e100
 80002f4:	e000ed00 	.word	0xe000ed00

080002f8 <TimerInitialise>:
		TIM_DIER_UIE, 		// enable update interrupt
		0x00,
};

// initialise a hardware timer
void TimerInitialise(HardwareTimer *hardware_timer, void (*completion_function)()) {
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
 8000300:	6039      	str	r1, [r7, #0]

    // Enable clock
    RCC->APB1ENR |= hardware_timer->MaskAPB1ENR;
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	695a      	ldr	r2, [r3, #20]
 8000306:	4b19      	ldr	r3, [pc, #100]	; (800036c <TimerInitialise+0x74>)
 8000308:	69db      	ldr	r3, [r3, #28]
 800030a:	4918      	ldr	r1, [pc, #96]	; (800036c <TimerInitialise+0x74>)
 800030c:	4313      	orrs	r3, r2
 800030e:	61cb      	str	r3, [r1, #28]

    // set prescaler
    hardware_timer->TIMx->PSC = hardware_timer->PrescaleValue;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	889b      	ldrh	r3, [r3, #4]
 8000314:	b29a      	uxth	r2, r3
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	629a      	str	r2, [r3, #40]	; 0x28

    // set auto reload register
    hardware_timer->TIMx->ARR = hardware_timer->ARRValue;
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	687a      	ldr	r2, [r7, #4]
 8000322:	6892      	ldr	r2, [r2, #8]
 8000324:	62da      	str	r2, [r3, #44]	; 0x2c

    // set CR1 mask
    hardware_timer->TIMx->CR1 |= hardware_timer->MaskCR1;
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	69d9      	ldr	r1, [r3, #28]
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	681a      	ldr	r2, [r3, #0]
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	430a      	orrs	r2, r1
 8000336:	601a      	str	r2, [r3, #0]

    // set DIER mask
    hardware_timer->TIMx->DIER |= hardware_timer->MaskDIER;
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	6a19      	ldr	r1, [r3, #32]
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	68da      	ldr	r2, [r3, #12]
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	430a      	orrs	r2, r1
 8000348:	60da      	str	r2, [r3, #12]

    // start TIMx
    hardware_timer->TIMx->CR1 |= TIM_CR1_CEN;
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	681a      	ldr	r2, [r3, #0]
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	f042 0201 	orr.w	r2, r2, #1
 8000358:	601a      	str	r2, [r3, #0]

    // set the timer completion function
    hardware_timer->timer_completion_function = completion_function;
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	683a      	ldr	r2, [r7, #0]
 800035e:	625a      	str	r2, [r3, #36]	; 0x24

}
 8000360:	bf00      	nop
 8000362:	370c      	adds	r7, #12
 8000364:	46bd      	mov	sp, r7
 8000366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036a:	4770      	bx	lr
 800036c:	40021000 	.word	0x40021000

08000370 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void){
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
	// Check if the interrupt is due to an overflow
	if (TIM2->SR & TIM_SR_UIF) {
 8000374:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000378:	691b      	ldr	r3, [r3, #16]
 800037a:	f003 0301 	and.w	r3, r3, #1
 800037e:	2b00      	cmp	r3, #0
 8000380:	d01b      	beq.n	80003ba <TIM2_IRQHandler+0x4a>
		// Clear the update interrupt flag
		TIM2->SR &= ~TIM_SR_UIF;
 8000382:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000386:	691b      	ldr	r3, [r3, #16]
 8000388:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800038c:	f023 0301 	bic.w	r3, r3, #1
 8000390:	6113      	str	r3, [r2, #16]

		// Run the overflow handler
		if (TIM2_init.timer_completion_function != 0x00) {
 8000392:	4b0b      	ldr	r3, [pc, #44]	; (80003c0 <TIM2_IRQHandler+0x50>)
 8000394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000396:	2b00      	cmp	r3, #0
 8000398:	d00f      	beq.n	80003ba <TIM2_IRQHandler+0x4a>
			TIM2_init.timer_completion_function();
 800039a:	4b09      	ldr	r3, [pc, #36]	; (80003c0 <TIM2_IRQHandler+0x50>)
 800039c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800039e:	4798      	blx	r3

			if (TIM2_init.oneShotMode == TRUE){
 80003a0:	4b07      	ldr	r3, [pc, #28]	; (80003c0 <TIM2_IRQHandler+0x50>)
 80003a2:	7b1b      	ldrb	r3, [r3, #12]
 80003a4:	b2db      	uxtb	r3, r3
 80003a6:	2b01      	cmp	r3, #1
 80003a8:	d107      	bne.n	80003ba <TIM2_IRQHandler+0x4a>
				// turn off the timer
				TIM2->CR1 |= ~TIM_CR1_CEN;
 80003aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003b4:	f063 0301 	orn	r3, r3, #1
 80003b8:	6013      	str	r3, [r2, #0]
			}
		}
	}
}
 80003ba:	bf00      	nop
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	20000000 	.word	0x20000000

080003c4 <enable_timer_interrupt>:

// enable the timer overflow interrupt
void enable_timer_interrupt() {
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003c8:	b672      	cpsid	i
}
 80003ca:	bf00      	nop
    // disable interrupts
	__disable_irq();

	NVIC_SetPriority(TIM2_IRQn, 1); // Set priority
 80003cc:	2101      	movs	r1, #1
 80003ce:	201c      	movs	r0, #28
 80003d0:	f7ff ff68 	bl	80002a4 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM2_IRQn); 		// Enable TIM2 IRQ
 80003d4:	201c      	movs	r0, #28
 80003d6:	f7ff ff47 	bl	8000268 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80003da:	b662      	cpsie	i
}
 80003dc:	bf00      	nop

    // re-enable interrupts
    __enable_irq();
}
 80003de:	bf00      	nop
 80003e0:	bd80      	pop	{r7, pc}

080003e2 <setPrescaleValue>:

// set the auto-reload register value
// input:
// - hardware_timer: pointer to the hardware timer where the period is being set
// - value: the desired prescaler to be set
void setPrescaleValue(struct _HardwareTimer *hardware_timer, uint16_t value) {
 80003e2:	b480      	push	{r7}
 80003e4:	b083      	sub	sp, #12
 80003e6:	af00      	add	r7, sp, #0
 80003e8:	6078      	str	r0, [r7, #4]
 80003ea:	460b      	mov	r3, r1
 80003ec:	807b      	strh	r3, [r7, #2]
	// set value
	hardware_timer->PrescaleValue = value;
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	887a      	ldrh	r2, [r7, #2]
 80003f2:	809a      	strh	r2, [r3, #4]
    hardware_timer->TIMx->PSC = value;
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	887a      	ldrh	r2, [r7, #2]
 80003fa:	629a      	str	r2, [r3, #40]	; 0x28

	// reset timer to engage clock
	hardware_timer->TIMx->EGR |= 0x01;
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	695a      	ldr	r2, [r3, #20]
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	f042 0201 	orr.w	r2, r2, #1
 800040a:	615a      	str	r2, [r3, #20]
}
 800040c:	bf00      	nop
 800040e:	370c      	adds	r7, #12
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr

08000418 <setARRValue>:

// set the auto-reload register value
// input:
// - hardware_timer: pointer to the hardware timer where the period is being set
// - value: the desired ARRValue to be set
void setARRValue(struct _HardwareTimer *hardware_timer, uint32_t value) {
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
 8000420:	6039      	str	r1, [r7, #0]
	// set value
	hardware_timer->ARRValue = value;
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	683a      	ldr	r2, [r7, #0]
 8000426:	609a      	str	r2, [r3, #8]
    hardware_timer->TIMx->ARR = value;
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	683a      	ldr	r2, [r7, #0]
 800042e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000430:	bf00      	nop
 8000432:	370c      	adds	r7, #12
 8000434:	46bd      	mov	sp, r7
 8000436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043a:	4770      	bx	lr

0800043c <setPeriod>:
// Set a period between clock overflows and therefore interrupts .
// Will also reset clock.
// input:
// - hardware_timer: pointer to the hardware timer where the period is being set
// - period: the delay period in microseconds
void setPeriod(struct _HardwareTimer *hardware_timer, uint32_t period) {
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
 8000444:	6039      	str	r1, [r7, #0]
	setARRValue(hardware_timer, period);  	// set overflow to period value
 8000446:	6839      	ldr	r1, [r7, #0]
 8000448:	6878      	ldr	r0, [r7, #4]
 800044a:	f7ff ffe5 	bl	8000418 <setARRValue>
	setPrescaleValue(hardware_timer, 8-1); 	// make clock freq 1MHz
 800044e:	2107      	movs	r1, #7
 8000450:	6878      	ldr	r0, [r7, #4]
 8000452:	f7ff ffc6 	bl	80003e2 <setPrescaleValue>
}
 8000456:	bf00      	nop
 8000458:	3708      	adds	r7, #8
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}

0800045e <setCompletionFunc>:

void setCompletionFunc(struct _HardwareTimer *hardware_timer, void (*completion_function)()){
 800045e:	b480      	push	{r7}
 8000460:	b083      	sub	sp, #12
 8000462:	af00      	add	r7, sp, #0
 8000464:	6078      	str	r0, [r7, #4]
 8000466:	6039      	str	r1, [r7, #0]
	hardware_timer->timer_completion_function = completion_function;
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	683a      	ldr	r2, [r7, #0]
 800046c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800046e:	bf00      	nop
 8000470:	370c      	adds	r7, #12
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr

0800047a <set_one_shot_mode>:


void set_one_shot_mode(struct _HardwareTimer *hardware_timer, uint32_t t_delay, void (*completion_function)()) {
 800047a:	b580      	push	{r7, lr}
 800047c:	b084      	sub	sp, #16
 800047e:	af00      	add	r7, sp, #0
 8000480:	60f8      	str	r0, [r7, #12]
 8000482:	60b9      	str	r1, [r7, #8]
 8000484:	607a      	str	r2, [r7, #4]

	// set the one shot mode to 1
	hardware_timer->oneShotMode = 1;
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	2201      	movs	r2, #1
 800048a:	731a      	strb	r2, [r3, #12]

	setPeriod(hardware_timer, t_delay);
 800048c:	68b9      	ldr	r1, [r7, #8]
 800048e:	68f8      	ldr	r0, [r7, #12]
 8000490:	f7ff ffd4 	bl	800043c <setPeriod>

	setCompletionFunc(hardware_timer, completion_function);
 8000494:	6879      	ldr	r1, [r7, #4]
 8000496:	68f8      	ldr	r0, [r7, #12]
 8000498:	f7ff ffe1 	bl	800045e <setCompletionFunc>
}
 800049c:	bf00      	nop
 800049e:	3710      	adds	r7, #16
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}

080004a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004a4:	480d      	ldr	r0, [pc, #52]	; (80004dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004a6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004a8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004ac:	480c      	ldr	r0, [pc, #48]	; (80004e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80004ae:	490d      	ldr	r1, [pc, #52]	; (80004e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004b0:	4a0d      	ldr	r2, [pc, #52]	; (80004e8 <LoopForever+0xe>)
  movs r3, #0
 80004b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004b4:	e002      	b.n	80004bc <LoopCopyDataInit>

080004b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ba:	3304      	adds	r3, #4

080004bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004c0:	d3f9      	bcc.n	80004b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004c2:	4a0a      	ldr	r2, [pc, #40]	; (80004ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80004c4:	4c0a      	ldr	r4, [pc, #40]	; (80004f0 <LoopForever+0x16>)
  movs r3, #0
 80004c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004c8:	e001      	b.n	80004ce <LoopFillZerobss>

080004ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004cc:	3204      	adds	r2, #4

080004ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004d0:	d3fb      	bcc.n	80004ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004d2:	f000 f811 	bl	80004f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004d6:	f7ff feaf 	bl	8000238 <main>

080004da <LoopForever>:

LoopForever:
  b LoopForever
 80004da:	e7fe      	b.n	80004da <LoopForever>
  ldr   r0, =_estack
 80004dc:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80004e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004e4:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 80004e8:	08000560 	.word	0x08000560
  ldr r2, =_sbss
 80004ec:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 80004f0:	20000044 	.word	0x20000044

080004f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004f4:	e7fe      	b.n	80004f4 <ADC1_2_IRQHandler>
	...

080004f8 <__libc_init_array>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	4d0d      	ldr	r5, [pc, #52]	; (8000530 <__libc_init_array+0x38>)
 80004fc:	4c0d      	ldr	r4, [pc, #52]	; (8000534 <__libc_init_array+0x3c>)
 80004fe:	1b64      	subs	r4, r4, r5
 8000500:	10a4      	asrs	r4, r4, #2
 8000502:	2600      	movs	r6, #0
 8000504:	42a6      	cmp	r6, r4
 8000506:	d109      	bne.n	800051c <__libc_init_array+0x24>
 8000508:	4d0b      	ldr	r5, [pc, #44]	; (8000538 <__libc_init_array+0x40>)
 800050a:	4c0c      	ldr	r4, [pc, #48]	; (800053c <__libc_init_array+0x44>)
 800050c:	f000 f818 	bl	8000540 <_init>
 8000510:	1b64      	subs	r4, r4, r5
 8000512:	10a4      	asrs	r4, r4, #2
 8000514:	2600      	movs	r6, #0
 8000516:	42a6      	cmp	r6, r4
 8000518:	d105      	bne.n	8000526 <__libc_init_array+0x2e>
 800051a:	bd70      	pop	{r4, r5, r6, pc}
 800051c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000520:	4798      	blx	r3
 8000522:	3601      	adds	r6, #1
 8000524:	e7ee      	b.n	8000504 <__libc_init_array+0xc>
 8000526:	f855 3b04 	ldr.w	r3, [r5], #4
 800052a:	4798      	blx	r3
 800052c:	3601      	adds	r6, #1
 800052e:	e7f2      	b.n	8000516 <__libc_init_array+0x1e>
 8000530:	08000558 	.word	0x08000558
 8000534:	08000558 	.word	0x08000558
 8000538:	08000558 	.word	0x08000558
 800053c:	0800055c 	.word	0x0800055c

08000540 <_init>:
 8000540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000542:	bf00      	nop
 8000544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000546:	bc08      	pop	{r3}
 8000548:	469e      	mov	lr, r3
 800054a:	4770      	bx	lr

0800054c <_fini>:
 800054c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800054e:	bf00      	nop
 8000550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000552:	bc08      	pop	{r3}
 8000554:	469e      	mov	lr, r3
 8000556:	4770      	bx	lr
