
exercise_3_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000458  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005ec  080005ec  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005ec  080005ec  00020050  2**0
                  CONTENTS
  4 .ARM          00000000  080005ec  080005ec  00020050  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005ec  080005ec  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005ec  080005ec  000105ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005f0  080005f0  000105f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  080005f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020050  2**0
                  CONTENTS
 10 .bss          0000001c  20000050  20000050  00020050  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000006c  2000006c  00020050  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 14 .debug_info   00001044  00000000  00000000  000200c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000004cb  00000000  00000000  00021107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000120  00000000  00000000  000215d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000c5  00000000  00000000  000216f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00014f44  00000000  00000000  000217bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000141e  00000000  00000000  00036701  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00075c39  00000000  00000000  00037b1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000380  00000000  00000000  000ad758  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007a  00000000  00000000  000adad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000050 	.word	0x20000050
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080005d4 	.word	0x080005d4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000054 	.word	0x20000054
 80001d0:	080005d4 	.word	0x080005d4

080001d4 <initialise_leds>:
#include "timer.h"
#include "stm32f303xc.h"

// code from lecture example W05-C-interrupt by Dr Stewart Worrall
// initialise the discovery board I/O (just outputs: inputs are selected by default)
void initialise_leds() {
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 80001da:	4b06      	ldr	r3, [pc, #24]	; (80001f4 <initialise_leds+0x20>)
 80001dc:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555;
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	f245 5255 	movw	r2, #21845	; 0x5555
 80001e4:	801a      	strh	r2, [r3, #0]
}
 80001e6:	bf00      	nop
 80001e8:	370c      	adds	r7, #12
 80001ea:	46bd      	mov	sp, r7
 80001ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f0:	4770      	bx	lr
 80001f2:	bf00      	nop
 80001f4:	48001002 	.word	0x48001002

080001f8 <enable_clocks>:

// code from lecture example W05-C-interrupt by Dr Stewart Worrall
// enable the clocks for desired peripherals (GPIOA, C and E)
void enable_clocks() {
 80001f8:	b480      	push	{r7}
 80001fa:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 80001fc:	4b05      	ldr	r3, [pc, #20]	; (8000214 <enable_clocks+0x1c>)
 80001fe:	695b      	ldr	r3, [r3, #20]
 8000200:	4a04      	ldr	r2, [pc, #16]	; (8000214 <enable_clocks+0x1c>)
 8000202:	f443 1328 	orr.w	r3, r3, #2752512	; 0x2a0000
 8000206:	6153      	str	r3, [r2, #20]
}
 8000208:	bf00      	nop
 800020a:	46bd      	mov	sp, r7
 800020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	40021000 	.word	0x40021000

08000218 <led_on>:
	if (*led_register == 0) {
		*led_register = 1;
	}
}

void led_on(void) {
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
	uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 800021e:	4b05      	ldr	r3, [pc, #20]	; (8000234 <led_on+0x1c>)
 8000220:	607b      	str	r3, [r7, #4]
	*led_register = 0xFF;
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	22ff      	movs	r2, #255	; 0xff
 8000226:	701a      	strb	r2, [r3, #0]
}
 8000228:	bf00      	nop
 800022a:	370c      	adds	r7, #12
 800022c:	46bd      	mov	sp, r7
 800022e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000232:	4770      	bx	lr
 8000234:	48001015 	.word	0x48001015

08000238 <led_off>:

void led_off(void) {
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
	uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 800023e:	4b05      	ldr	r3, [pc, #20]	; (8000254 <led_off+0x1c>)
 8000240:	607b      	str	r3, [r7, #4]
	*led_register = 0x00;
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	2200      	movs	r2, #0
 8000246:	701a      	strb	r2, [r3, #0]
}
 8000248:	bf00      	nop
 800024a:	370c      	adds	r7, #12
 800024c:	46bd      	mov	sp, r7
 800024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000252:	4770      	bx	lr
 8000254:	48001015 	.word	0x48001015

08000258 <main>:

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void) {
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
	// enable components
	enable_clocks();
 800025e:	f7ff ffcb 	bl	80001f8 <enable_clocks>
	initialise_leds();
 8000262:	f7ff ffb7 	bl	80001d4 <initialise_leds>
	enable_timer_interrupt();
 8000266:	f000 f8fb 	bl	8000460 <enable_timer_interrupt>
	// set period demonstration
//	uint32_t period = 1000;
//	TimerInitialise(&TIM2_init, period, &chase_led_changing_period);
//
//	// one shot mode
	uint32_t delay = 1000; // delay in milliseconds
 800026a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800026e:	607b      	str	r3, [r7, #4]
	setOneShotMode(&TIM2_init, delay, &led_on); // set timer to one shot mode
 8000270:	4a06      	ldr	r2, [pc, #24]	; (800028c <main+0x34>)
 8000272:	6879      	ldr	r1, [r7, #4]
 8000274:	4806      	ldr	r0, [pc, #24]	; (8000290 <main+0x38>)
 8000276:	f000 f948 	bl	800050a <setOneShotMode>

	delay = 5000;
 800027a:	f241 3388 	movw	r3, #5000	; 0x1388
 800027e:	607b      	str	r3, [r7, #4]
	setOneShotMode(&TIM4_init, delay, &led_off); // turn off timers after 1 second
 8000280:	4a04      	ldr	r2, [pc, #16]	; (8000294 <main+0x3c>)
 8000282:	6879      	ldr	r1, [r7, #4]
 8000284:	4804      	ldr	r0, [pc, #16]	; (8000298 <main+0x40>)
 8000286:	f000 f940 	bl	800050a <setOneShotMode>

    /* Loop forever */
	for(;;);
 800028a:	e7fe      	b.n	800028a <main+0x32>
 800028c:	08000219 	.word	0x08000219
 8000290:	20000000 	.word	0x20000000
 8000294:	08000239 	.word	0x08000239
 8000298:	20000028 	.word	0x20000028

0800029c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800029c:	b480      	push	{r7}
 800029e:	b083      	sub	sp, #12
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	4603      	mov	r3, r0
 80002a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	db0b      	blt.n	80002c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002ae:	79fb      	ldrb	r3, [r7, #7]
 80002b0:	f003 021f 	and.w	r2, r3, #31
 80002b4:	4907      	ldr	r1, [pc, #28]	; (80002d4 <__NVIC_EnableIRQ+0x38>)
 80002b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ba:	095b      	lsrs	r3, r3, #5
 80002bc:	2001      	movs	r0, #1
 80002be:	fa00 f202 	lsl.w	r2, r0, r2
 80002c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002c6:	bf00      	nop
 80002c8:	370c      	adds	r7, #12
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	e000e100 	.word	0xe000e100

080002d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	6039      	str	r1, [r7, #0]
 80002e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	db0a      	blt.n	8000302 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ec:	683b      	ldr	r3, [r7, #0]
 80002ee:	b2da      	uxtb	r2, r3
 80002f0:	490c      	ldr	r1, [pc, #48]	; (8000324 <__NVIC_SetPriority+0x4c>)
 80002f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002f6:	0112      	lsls	r2, r2, #4
 80002f8:	b2d2      	uxtb	r2, r2
 80002fa:	440b      	add	r3, r1
 80002fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000300:	e00a      	b.n	8000318 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000302:	683b      	ldr	r3, [r7, #0]
 8000304:	b2da      	uxtb	r2, r3
 8000306:	4908      	ldr	r1, [pc, #32]	; (8000328 <__NVIC_SetPriority+0x50>)
 8000308:	79fb      	ldrb	r3, [r7, #7]
 800030a:	f003 030f 	and.w	r3, r3, #15
 800030e:	3b04      	subs	r3, #4
 8000310:	0112      	lsls	r2, r2, #4
 8000312:	b2d2      	uxtb	r2, r2
 8000314:	440b      	add	r3, r1
 8000316:	761a      	strb	r2, [r3, #24]
}
 8000318:	bf00      	nop
 800031a:	370c      	adds	r7, #12
 800031c:	46bd      	mov	sp, r7
 800031e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000322:	4770      	bx	lr
 8000324:	e000e100 	.word	0xe000e100
 8000328:	e000ed00 	.word	0xe000ed00

0800032c <TimerInitialise>:
		TIM_DIER_UIE, 		// enable update interrupt
		0x00,
};

// initialise a hardware timer
void TimerInitialise(HardwareTimer *hardware_timer, uint32_t delay, void (*completion_function)()) {
 800032c:	b480      	push	{r7}
 800032e:	b085      	sub	sp, #20
 8000330:	af00      	add	r7, sp, #0
 8000332:	60f8      	str	r0, [r7, #12]
 8000334:	60b9      	str	r1, [r7, #8]
 8000336:	607a      	str	r2, [r7, #4]

    // Enable clock
    RCC->APB1ENR |= hardware_timer->MaskAPB1ENR;
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	695a      	ldr	r2, [r3, #20]
 800033c:	4b1c      	ldr	r3, [pc, #112]	; (80003b0 <TimerInitialise+0x84>)
 800033e:	69db      	ldr	r3, [r3, #28]
 8000340:	491b      	ldr	r1, [pc, #108]	; (80003b0 <TimerInitialise+0x84>)
 8000342:	4313      	orrs	r3, r2
 8000344:	61cb      	str	r3, [r1, #28]

    // set prescaler
    hardware_timer->PrescaleValue = 7999; // bring clock speed down to 1kHz
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800034c:	809a      	strh	r2, [r3, #4]
    hardware_timer->TIMx->PSC = hardware_timer->PrescaleValue;
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	889b      	ldrh	r3, [r3, #4]
 8000352:	b29a      	uxth	r2, r3
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	629a      	str	r2, [r3, #40]	; 0x28

    // set auto reload register to delay time
    hardware_timer->ARRValue = delay;
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	68ba      	ldr	r2, [r7, #8]
 800035e:	609a      	str	r2, [r3, #8]
    hardware_timer->TIMx->ARR = hardware_timer->ARRValue;
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	68fa      	ldr	r2, [r7, #12]
 8000366:	6892      	ldr	r2, [r2, #8]
 8000368:	62da      	str	r2, [r3, #44]	; 0x2c

    // set CR1 mask
    hardware_timer->TIMx->CR1 |= hardware_timer->MaskCR1;
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	69d9      	ldr	r1, [r3, #28]
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	681a      	ldr	r2, [r3, #0]
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	430a      	orrs	r2, r1
 800037a:	601a      	str	r2, [r3, #0]

    // set DIER mask
    hardware_timer->TIMx->DIER |= hardware_timer->MaskDIER;
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	6a19      	ldr	r1, [r3, #32]
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	68da      	ldr	r2, [r3, #12]
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	430a      	orrs	r2, r1
 800038c:	60da      	str	r2, [r3, #12]

    // set the timer completion function
    hardware_timer->timer_completion_function = completion_function;
 800038e:	68fb      	ldr	r3, [r7, #12]
 8000390:	687a      	ldr	r2, [r7, #4]
 8000392:	625a      	str	r2, [r3, #36]	; 0x24

    // start TIMx
    hardware_timer->TIMx->CR1 |= TIM_CR1_CEN;
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	681a      	ldr	r2, [r3, #0]
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	f042 0201 	orr.w	r2, r2, #1
 80003a2:	601a      	str	r2, [r3, #0]
}
 80003a4:	bf00      	nop
 80003a6:	3714      	adds	r7, #20
 80003a8:	46bd      	mov	sp, r7
 80003aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ae:	4770      	bx	lr
 80003b0:	40021000 	.word	0x40021000

080003b4 <TIM2_IRQHandler>:


// tim2 overflow handler
void TIM2_IRQHandler(void) {
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF) {
 80003b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003bc:	691b      	ldr	r3, [r3, #16]
 80003be:	f003 0301 	and.w	r3, r3, #1
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d01e      	beq.n	8000404 <TIM2_IRQHandler+0x50>
        TIM2->SR &= ~TIM_SR_UIF; // Clear the interrupt flag
 80003c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003ca:	691b      	ldr	r3, [r3, #16]
 80003cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003d0:	f023 0301 	bic.w	r3, r3, #1
 80003d4:	6113      	str	r3, [r2, #16]

        if (TIM2_init.oneShotMode) {
 80003d6:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <TIM2_IRQHandler+0x54>)
 80003d8:	7b1b      	ldrb	r3, [r3, #12]
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d00a      	beq.n	80003f6 <TIM2_IRQHandler+0x42>
            TIM2->CR1 &= ~TIM_CR1_CEN; // Stop the timer if in one-shot mode
 80003e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003ea:	f023 0301 	bic.w	r3, r3, #1
 80003ee:	6013      	str	r3, [r2, #0]

            TIM2_init.oneShotMode = 0; // turn off the oneshot mode
 80003f0:	4b05      	ldr	r3, [pc, #20]	; (8000408 <TIM2_IRQHandler+0x54>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	731a      	strb	r2, [r3, #12]
        }

        if (TIM2_init.timer_completion_function != NULL) {
 80003f6:	4b04      	ldr	r3, [pc, #16]	; (8000408 <TIM2_IRQHandler+0x54>)
 80003f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d002      	beq.n	8000404 <TIM2_IRQHandler+0x50>
            TIM2_init.timer_completion_function();
 80003fe:	4b02      	ldr	r3, [pc, #8]	; (8000408 <TIM2_IRQHandler+0x54>)
 8000400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000402:	4798      	blx	r3
        }
    }
}
 8000404:	bf00      	nop
 8000406:	bd80      	pop	{r7, pc}
 8000408:	20000000 	.word	0x20000000

0800040c <TIM4_IRQHandler>:

// tim4 overflow handler
void TIM4_IRQHandler(void) {
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
    if (TIM4->SR & TIM_SR_UIF) {
 8000410:	4b11      	ldr	r3, [pc, #68]	; (8000458 <TIM4_IRQHandler+0x4c>)
 8000412:	691b      	ldr	r3, [r3, #16]
 8000414:	f003 0301 	and.w	r3, r3, #1
 8000418:	2b00      	cmp	r3, #0
 800041a:	d01a      	beq.n	8000452 <TIM4_IRQHandler+0x46>
        TIM4->SR &= ~TIM_SR_UIF; // Clear the interrupt flag
 800041c:	4b0e      	ldr	r3, [pc, #56]	; (8000458 <TIM4_IRQHandler+0x4c>)
 800041e:	691b      	ldr	r3, [r3, #16]
 8000420:	4a0d      	ldr	r2, [pc, #52]	; (8000458 <TIM4_IRQHandler+0x4c>)
 8000422:	f023 0301 	bic.w	r3, r3, #1
 8000426:	6113      	str	r3, [r2, #16]

        if (TIM4_init.oneShotMode) {
 8000428:	4b0c      	ldr	r3, [pc, #48]	; (800045c <TIM4_IRQHandler+0x50>)
 800042a:	7b1b      	ldrb	r3, [r3, #12]
 800042c:	b2db      	uxtb	r3, r3
 800042e:	2b00      	cmp	r3, #0
 8000430:	d008      	beq.n	8000444 <TIM4_IRQHandler+0x38>
            TIM4->CR1 &= ~TIM_CR1_CEN; // Stop the timer if in one-shot mode
 8000432:	4b09      	ldr	r3, [pc, #36]	; (8000458 <TIM4_IRQHandler+0x4c>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	4a08      	ldr	r2, [pc, #32]	; (8000458 <TIM4_IRQHandler+0x4c>)
 8000438:	f023 0301 	bic.w	r3, r3, #1
 800043c:	6013      	str	r3, [r2, #0]

            TIM4_init.oneShotMode = 0; // turn off the oneshot mode
 800043e:	4b07      	ldr	r3, [pc, #28]	; (800045c <TIM4_IRQHandler+0x50>)
 8000440:	2200      	movs	r2, #0
 8000442:	731a      	strb	r2, [r3, #12]
        }

        if (TIM4_init.timer_completion_function != NULL) {
 8000444:	4b05      	ldr	r3, [pc, #20]	; (800045c <TIM4_IRQHandler+0x50>)
 8000446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000448:	2b00      	cmp	r3, #0
 800044a:	d002      	beq.n	8000452 <TIM4_IRQHandler+0x46>
            TIM4_init.timer_completion_function();
 800044c:	4b03      	ldr	r3, [pc, #12]	; (800045c <TIM4_IRQHandler+0x50>)
 800044e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000450:	4798      	blx	r3
        }
    }
}
 8000452:	bf00      	nop
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	40000800 	.word	0x40000800
 800045c:	20000028 	.word	0x20000028

08000460 <enable_timer_interrupt>:


// enable the timer overflow interrupt
void enable_timer_interrupt() {
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000464:	b672      	cpsid	i
}
 8000466:	bf00      	nop
    // disable interrupts
	__disable_irq();

	NVIC_SetPriority(TIM2_IRQn, 1); // Set priority
 8000468:	2101      	movs	r1, #1
 800046a:	201c      	movs	r0, #28
 800046c:	f7ff ff34 	bl	80002d8 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM2_IRQn); 		// Enable TIM2 IRQ
 8000470:	201c      	movs	r0, #28
 8000472:	f7ff ff13 	bl	800029c <__NVIC_EnableIRQ>

	NVIC_SetPriority(TIM4_IRQn, 1); // Set priority
 8000476:	2101      	movs	r1, #1
 8000478:	201e      	movs	r0, #30
 800047a:	f7ff ff2d 	bl	80002d8 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM4_IRQn); 		// Enable TIM2 IRQ
 800047e:	201e      	movs	r0, #30
 8000480:	f7ff ff0c 	bl	800029c <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000484:	b662      	cpsie	i
}
 8000486:	bf00      	nop

    // re-enable interrupts
    __enable_irq();
}
 8000488:	bf00      	nop
 800048a:	bd80      	pop	{r7, pc}

0800048c <setPrescaleValue>:

// set the auto-reload register value
// input:
// - hardware_timer: pointer to the hardware timer where the period is being set
// - value: the desired prescaler to be set
void setPrescaleValue(struct _HardwareTimer *hardware_timer, uint16_t value) {
 800048c:	b480      	push	{r7}
 800048e:	b083      	sub	sp, #12
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
 8000494:	460b      	mov	r3, r1
 8000496:	807b      	strh	r3, [r7, #2]
	// set value
	hardware_timer->PrescaleValue = value;
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	887a      	ldrh	r2, [r7, #2]
 800049c:	809a      	strh	r2, [r3, #4]
    hardware_timer->TIMx->PSC = value;
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	887a      	ldrh	r2, [r7, #2]
 80004a4:	629a      	str	r2, [r3, #40]	; 0x28

	// reset timer to engage clock
	hardware_timer->TIMx->EGR |= 0x01;
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	695a      	ldr	r2, [r3, #20]
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	f042 0201 	orr.w	r2, r2, #1
 80004b4:	615a      	str	r2, [r3, #20]
}
 80004b6:	bf00      	nop
 80004b8:	370c      	adds	r7, #12
 80004ba:	46bd      	mov	sp, r7
 80004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c0:	4770      	bx	lr

080004c2 <setARRValue>:

// set the auto-reload register value
// input:
// - hardware_timer: pointer to the hardware timer where the period is being set
// - value: the desired ARRValue to be set
void setARRValue(struct _HardwareTimer *hardware_timer, uint32_t value) {
 80004c2:	b480      	push	{r7}
 80004c4:	b083      	sub	sp, #12
 80004c6:	af00      	add	r7, sp, #0
 80004c8:	6078      	str	r0, [r7, #4]
 80004ca:	6039      	str	r1, [r7, #0]
	// set value
	hardware_timer->ARRValue = value;
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	683a      	ldr	r2, [r7, #0]
 80004d0:	609a      	str	r2, [r3, #8]
    hardware_timer->TIMx->ARR = value;
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	683a      	ldr	r2, [r7, #0]
 80004d8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80004da:	bf00      	nop
 80004dc:	370c      	adds	r7, #12
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr

080004e6 <setPeriod>:
// Set a period between clock overflows and therefore interrupts .
// Will also reset clock.
// input:
// - hardware_timer: pointer to the hardware timer where the period is being set
// - period: the delay period in microseconds
void setPeriod(struct _HardwareTimer *hardware_timer, uint32_t period) {
 80004e6:	b580      	push	{r7, lr}
 80004e8:	b082      	sub	sp, #8
 80004ea:	af00      	add	r7, sp, #0
 80004ec:	6078      	str	r0, [r7, #4]
 80004ee:	6039      	str	r1, [r7, #0]
	setARRValue(hardware_timer, period);  	// set overflow to period value
 80004f0:	6839      	ldr	r1, [r7, #0]
 80004f2:	6878      	ldr	r0, [r7, #4]
 80004f4:	f7ff ffe5 	bl	80004c2 <setARRValue>
	setPrescaleValue(hardware_timer, 8000-1); 	// make clock freq 1MHz
 80004f8:	f641 713f 	movw	r1, #7999	; 0x1f3f
 80004fc:	6878      	ldr	r0, [r7, #4]
 80004fe:	f7ff ffc5 	bl	800048c <setPrescaleValue>
}
 8000502:	bf00      	nop
 8000504:	3708      	adds	r7, #8
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}

0800050a <setOneShotMode>:
void setCompletionFunc(struct _HardwareTimer *hardware_timer, void (*completion_function)()){
	hardware_timer->timer_completion_function = completion_function;
}


void setOneShotMode(struct _HardwareTimer *hardware_timer, uint32_t t_delay, void (*completion_function)()) {
 800050a:	b580      	push	{r7, lr}
 800050c:	b084      	sub	sp, #16
 800050e:	af00      	add	r7, sp, #0
 8000510:	60f8      	str	r0, [r7, #12]
 8000512:	60b9      	str	r1, [r7, #8]
 8000514:	607a      	str	r2, [r7, #4]

	// set the one shot mode to 1
	hardware_timer->oneShotMode = 1;
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	2201      	movs	r2, #1
 800051a:	731a      	strb	r2, [r3, #12]

	// initialise the timer
	TimerInitialise(hardware_timer, t_delay, completion_function);
 800051c:	687a      	ldr	r2, [r7, #4]
 800051e:	68b9      	ldr	r1, [r7, #8]
 8000520:	68f8      	ldr	r0, [r7, #12]
 8000522:	f7ff ff03 	bl	800032c <TimerInitialise>

	// set delay
	setPeriod(hardware_timer, t_delay);
 8000526:	68b9      	ldr	r1, [r7, #8]
 8000528:	68f8      	ldr	r0, [r7, #12]
 800052a:	f7ff ffdc 	bl	80004e6 <setPeriod>
}
 800052e:	bf00      	nop
 8000530:	3710      	adds	r7, #16
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
	...

08000538 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000538:	480d      	ldr	r0, [pc, #52]	; (8000570 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800053a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800053c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000540:	480c      	ldr	r0, [pc, #48]	; (8000574 <LoopForever+0x6>)
  ldr r1, =_edata
 8000542:	490d      	ldr	r1, [pc, #52]	; (8000578 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000544:	4a0d      	ldr	r2, [pc, #52]	; (800057c <LoopForever+0xe>)
  movs r3, #0
 8000546:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000548:	e002      	b.n	8000550 <LoopCopyDataInit>

0800054a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800054a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800054c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800054e:	3304      	adds	r3, #4

08000550 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000550:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000552:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000554:	d3f9      	bcc.n	800054a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000556:	4a0a      	ldr	r2, [pc, #40]	; (8000580 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000558:	4c0a      	ldr	r4, [pc, #40]	; (8000584 <LoopForever+0x16>)
  movs r3, #0
 800055a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800055c:	e001      	b.n	8000562 <LoopFillZerobss>

0800055e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800055e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000560:	3204      	adds	r2, #4

08000562 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000562:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000564:	d3fb      	bcc.n	800055e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000566:	f000 f811 	bl	800058c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800056a:	f7ff fe75 	bl	8000258 <main>

0800056e <LoopForever>:

LoopForever:
  b LoopForever
 800056e:	e7fe      	b.n	800056e <LoopForever>
  ldr   r0, =_estack
 8000570:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000574:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000578:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 800057c:	080005f4 	.word	0x080005f4
  ldr r2, =_sbss
 8000580:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8000584:	2000006c 	.word	0x2000006c

08000588 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000588:	e7fe      	b.n	8000588 <ADC1_2_IRQHandler>
	...

0800058c <__libc_init_array>:
 800058c:	b570      	push	{r4, r5, r6, lr}
 800058e:	4d0d      	ldr	r5, [pc, #52]	; (80005c4 <__libc_init_array+0x38>)
 8000590:	4c0d      	ldr	r4, [pc, #52]	; (80005c8 <__libc_init_array+0x3c>)
 8000592:	1b64      	subs	r4, r4, r5
 8000594:	10a4      	asrs	r4, r4, #2
 8000596:	2600      	movs	r6, #0
 8000598:	42a6      	cmp	r6, r4
 800059a:	d109      	bne.n	80005b0 <__libc_init_array+0x24>
 800059c:	4d0b      	ldr	r5, [pc, #44]	; (80005cc <__libc_init_array+0x40>)
 800059e:	4c0c      	ldr	r4, [pc, #48]	; (80005d0 <__libc_init_array+0x44>)
 80005a0:	f000 f818 	bl	80005d4 <_init>
 80005a4:	1b64      	subs	r4, r4, r5
 80005a6:	10a4      	asrs	r4, r4, #2
 80005a8:	2600      	movs	r6, #0
 80005aa:	42a6      	cmp	r6, r4
 80005ac:	d105      	bne.n	80005ba <__libc_init_array+0x2e>
 80005ae:	bd70      	pop	{r4, r5, r6, pc}
 80005b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80005b4:	4798      	blx	r3
 80005b6:	3601      	adds	r6, #1
 80005b8:	e7ee      	b.n	8000598 <__libc_init_array+0xc>
 80005ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80005be:	4798      	blx	r3
 80005c0:	3601      	adds	r6, #1
 80005c2:	e7f2      	b.n	80005aa <__libc_init_array+0x1e>
 80005c4:	080005ec 	.word	0x080005ec
 80005c8:	080005ec 	.word	0x080005ec
 80005cc:	080005ec 	.word	0x080005ec
 80005d0:	080005f0 	.word	0x080005f0

080005d4 <_init>:
 80005d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005d6:	bf00      	nop
 80005d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005da:	bc08      	pop	{r3}
 80005dc:	469e      	mov	lr, r3
 80005de:	4770      	bx	lr

080005e0 <_fini>:
 80005e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005e2:	bf00      	nop
 80005e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005e6:	bc08      	pop	{r3}
 80005e8:	469e      	mov	lr, r3
 80005ea:	4770      	bx	lr
