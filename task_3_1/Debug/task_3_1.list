
task_3_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002d8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800046c  08000474  00010474  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800046c  0800046c  00010474  2**0
                  CONTENTS
  4 .ARM          00000000  0800046c  0800046c  00010474  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800046c  08000474  00010474  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800046c  0800046c  0001046c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000470  08000470  00010470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010474  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010474  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010474  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000104a4  2**0
                  CONTENTS, READONLY
 14 .debug_info   000009fd  00000000  00000000  000104e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000230  00000000  00000000  00010ee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000080  00000000  00000000  00011118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000056  00000000  00000000  00011198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00014c85  00000000  00000000  000111ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000006a5  00000000  00000000  00025e73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00072673  00000000  00000000  00026518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000015c  00000000  00000000  00098b8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  00098ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000454 	.word	0x08000454

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000454 	.word	0x08000454

080001d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	db0b      	blt.n	80001fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f003 021f 	and.w	r2, r3, #31
 80001ec:	4907      	ldr	r1, [pc, #28]	; (800020c <__NVIC_EnableIRQ+0x38>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	095b      	lsrs	r3, r3, #5
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e100 	.word	0xe000e100

08000210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	6039      	str	r1, [r7, #0]
 800021a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800021c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000220:	2b00      	cmp	r3, #0
 8000222:	db0a      	blt.n	800023a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	b2da      	uxtb	r2, r3
 8000228:	490c      	ldr	r1, [pc, #48]	; (800025c <__NVIC_SetPriority+0x4c>)
 800022a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022e:	0112      	lsls	r2, r2, #4
 8000230:	b2d2      	uxtb	r2, r2
 8000232:	440b      	add	r3, r1
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000238:	e00a      	b.n	8000250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	b2da      	uxtb	r2, r3
 800023e:	4908      	ldr	r1, [pc, #32]	; (8000260 <__NVIC_SetPriority+0x50>)
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	f003 030f 	and.w	r3, r3, #15
 8000246:	3b04      	subs	r3, #4
 8000248:	0112      	lsls	r2, r2, #4
 800024a:	b2d2      	uxtb	r2, r2
 800024c:	440b      	add	r3, r1
 800024e:	761a      	strb	r2, [r3, #24]
}
 8000250:	bf00      	nop
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr
 800025c:	e000e100 	.word	0xe000e100
 8000260:	e000ed00 	.word	0xe000ed00

08000264 <TIM2_IRQHandler>:

// make a function pointer
void (*on_timer_overflow)() = 0x00;

// function called when interrupt is flagged for TIM2
void TIM2_IRQHandler() {
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
    // Check if the interrupt is due to an overflow
    if (TIM2->SR & TIM_SR_UIF) {
 8000268:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800026c:	691b      	ldr	r3, [r3, #16]
 800026e:	f003 0301 	and.w	r3, r3, #1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d00e      	beq.n	8000294 <TIM2_IRQHandler+0x30>
        // Clear the update interrupt flag
        TIM2->SR &= ~TIM_SR_UIF;
 8000276:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800027a:	691b      	ldr	r3, [r3, #16]
 800027c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000280:	f023 0301 	bic.w	r3, r3, #1
 8000284:	6113      	str	r3, [r2, #16]

        // Run the overflow handler
        if (on_timer_overflow != 0x00) { // make sure the handler is not null
 8000286:	4b04      	ldr	r3, [pc, #16]	; (8000298 <TIM2_IRQHandler+0x34>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d002      	beq.n	8000294 <TIM2_IRQHandler+0x30>
            on_timer_overflow();
 800028e:	4b02      	ldr	r3, [pc, #8]	; (8000298 <TIM2_IRQHandler+0x34>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	4798      	blx	r3
        }
    }
}
 8000294:	bf00      	nop
 8000296:	bd80      	pop	{r7, pc}
 8000298:	2000001c 	.word	0x2000001c

0800029c <initialise_board>:

// code from lecture example W05-C-interrupt by Dr Stewart Worrall
// initialise the discovery board I/O (just outputs: inputs are selected by default)
void initialise_board() {
 800029c:	b480      	push	{r7}
 800029e:	b083      	sub	sp, #12
 80002a0:	af00      	add	r7, sp, #0
	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 80002a2:	4b06      	ldr	r3, [pc, #24]	; (80002bc <initialise_board+0x20>)
 80002a4:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555;
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	f245 5255 	movw	r2, #21845	; 0x5555
 80002ac:	801a      	strh	r2, [r3, #0]
}
 80002ae:	bf00      	nop
 80002b0:	370c      	adds	r7, #12
 80002b2:	46bd      	mov	sp, r7
 80002b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	48001002 	.word	0x48001002

080002c0 <enable_clocks>:

// code from lecture example W05-C-interrupt by Dr Stewart Worrall
// enable the clocks for desired peripherals (GPIOA, C and E)
void enable_clocks() {
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 80002c4:	4b05      	ldr	r3, [pc, #20]	; (80002dc <enable_clocks+0x1c>)
 80002c6:	695b      	ldr	r3, [r3, #20]
 80002c8:	4a04      	ldr	r2, [pc, #16]	; (80002dc <enable_clocks+0x1c>)
 80002ca:	f443 1328 	orr.w	r3, r3, #2752512	; 0x2a0000
 80002ce:	6153      	str	r3, [r2, #20]
}
 80002d0:	bf00      	nop
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr
 80002da:	bf00      	nop
 80002dc:	40021000 	.word	0x40021000

080002e0 <TIM2_interrupt_init>:
 * - int period: desired period between actions in milliseconds
 *
 * Outputs:
 * - None */
void TIM2_interrupt_init(int period)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002e8:	b672      	cpsid	i
}
 80002ea:	bf00      	nop
	// disable other interrupts while initialising
	__disable_irq();

    // Enable TIM2 clock
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80002ec:	4b19      	ldr	r3, [pc, #100]	; (8000354 <TIM2_interrupt_init+0x74>)
 80002ee:	69db      	ldr	r3, [r3, #28]
 80002f0:	4a18      	ldr	r2, [pc, #96]	; (8000354 <TIM2_interrupt_init+0x74>)
 80002f2:	f043 0301 	orr.w	r3, r3, #1
 80002f6:	61d3      	str	r3, [r2, #28]

    // Configure TIM2
    TIM2->PSC = 8000 - 1; 			// Set prescaler, clock speed is now 1kHz
 80002f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002fc:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000300:	629a      	str	r2, [r3, #40]	; 0x28
    TIM2->ARR = period; 			// Set auto-reload value
 8000302:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	62d3      	str	r3, [r2, #44]	; 0x2c
    TIM2->CR1 |= TIM_CR1_URS; 		// interrupt only flagged at over/underflow
 800030a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000314:	f043 0304 	orr.w	r3, r3, #4
 8000318:	6013      	str	r3, [r2, #0]
    TIM2->DIER |= TIM_DIER_UIE; 	// Enable update interrupt
 800031a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800031e:	68db      	ldr	r3, [r3, #12]
 8000320:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000324:	f043 0301 	orr.w	r3, r3, #1
 8000328:	60d3      	str	r3, [r2, #12]
    NVIC_SetPriority(TIM2_IRQn, 1); // Set priority
 800032a:	2101      	movs	r1, #1
 800032c:	201c      	movs	r0, #28
 800032e:	f7ff ff6f 	bl	8000210 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM2_IRQn); 		// Enable TIM2 IRQ
 8000332:	201c      	movs	r0, #28
 8000334:	f7ff ff4e 	bl	80001d4 <__NVIC_EnableIRQ>

    // Start TIM2
    TIM2->CR1 |= TIM_CR1_CEN;
 8000338:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000342:	f043 0301 	orr.w	r3, r3, #1
 8000346:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000348:	b662      	cpsie	i
}
 800034a:	bf00      	nop

	// Re-enable all interrupts (now that we are finished)
	__enable_irq();
}
 800034c:	bf00      	nop
 800034e:	3708      	adds	r7, #8
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}
 8000354:	40021000 	.word	0x40021000

08000358 <chase_led>:


void chase_led(){
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
	uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 800035e:	4b0a      	ldr	r3, [pc, #40]	; (8000388 <chase_led+0x30>)
 8000360:	607b      	str	r3, [r7, #4]

	*led_register <<= 1;
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	005b      	lsls	r3, r3, #1
 8000368:	b2da      	uxtb	r2, r3
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	701a      	strb	r2, [r3, #0]
	if (*led_register == 0) {
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	2b00      	cmp	r3, #0
 8000374:	d102      	bne.n	800037c <chase_led+0x24>
		*led_register = 1;
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	2201      	movs	r2, #1
 800037a:	701a      	strb	r2, [r3, #0]
	}
}
 800037c:	bf00      	nop
 800037e:	370c      	adds	r7, #12
 8000380:	46bd      	mov	sp, r7
 8000382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000386:	4770      	bx	lr
 8000388:	48001015 	.word	0x48001015

0800038c <main>:


int main(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
	// enable components
	enable_clocks();
 8000392:	f7ff ff95 	bl	80002c0 <enable_clocks>
	initialise_board();
 8000396:	f7ff ff81 	bl	800029c <initialise_board>

	// set the interrupt handling function:
	on_timer_overflow = &chase_led;
 800039a:	4b05      	ldr	r3, [pc, #20]	; (80003b0 <main+0x24>)
 800039c:	4a05      	ldr	r2, [pc, #20]	; (80003b4 <main+0x28>)
 800039e:	601a      	str	r2, [r3, #0]

	// initialise timer with set period between interrupts
	int period = 1000; // ms
 80003a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003a4:	607b      	str	r3, [r7, #4]
	TIM2_interrupt_init(period);
 80003a6:	6878      	ldr	r0, [r7, #4]
 80003a8:	f7ff ff9a 	bl	80002e0 <TIM2_interrupt_init>

    /* Loop forever */
	for(;;);
 80003ac:	e7fe      	b.n	80003ac <main+0x20>
 80003ae:	bf00      	nop
 80003b0:	2000001c 	.word	0x2000001c
 80003b4:	08000359 	.word	0x08000359

080003b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003b8:	480d      	ldr	r0, [pc, #52]	; (80003f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003ba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003bc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003c0:	480c      	ldr	r0, [pc, #48]	; (80003f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80003c2:	490d      	ldr	r1, [pc, #52]	; (80003f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003c4:	4a0d      	ldr	r2, [pc, #52]	; (80003fc <LoopForever+0xe>)
  movs r3, #0
 80003c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003c8:	e002      	b.n	80003d0 <LoopCopyDataInit>

080003ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ce:	3304      	adds	r3, #4

080003d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003d4:	d3f9      	bcc.n	80003ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003d6:	4a0a      	ldr	r2, [pc, #40]	; (8000400 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003d8:	4c0a      	ldr	r4, [pc, #40]	; (8000404 <LoopForever+0x16>)
  movs r3, #0
 80003da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003dc:	e001      	b.n	80003e2 <LoopFillZerobss>

080003de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003e0:	3204      	adds	r2, #4

080003e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003e4:	d3fb      	bcc.n	80003de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003e6:	f000 f811 	bl	800040c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ea:	f7ff ffcf 	bl	800038c <main>

080003ee <LoopForever>:

LoopForever:
  b LoopForever
 80003ee:	e7fe      	b.n	80003ee <LoopForever>
  ldr   r0, =_estack
 80003f0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80003f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003f8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003fc:	08000474 	.word	0x08000474
  ldr r2, =_sbss
 8000400:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000404:	20000020 	.word	0x20000020

08000408 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000408:	e7fe      	b.n	8000408 <ADC1_2_IRQHandler>
	...

0800040c <__libc_init_array>:
 800040c:	b570      	push	{r4, r5, r6, lr}
 800040e:	4d0d      	ldr	r5, [pc, #52]	; (8000444 <__libc_init_array+0x38>)
 8000410:	4c0d      	ldr	r4, [pc, #52]	; (8000448 <__libc_init_array+0x3c>)
 8000412:	1b64      	subs	r4, r4, r5
 8000414:	10a4      	asrs	r4, r4, #2
 8000416:	2600      	movs	r6, #0
 8000418:	42a6      	cmp	r6, r4
 800041a:	d109      	bne.n	8000430 <__libc_init_array+0x24>
 800041c:	4d0b      	ldr	r5, [pc, #44]	; (800044c <__libc_init_array+0x40>)
 800041e:	4c0c      	ldr	r4, [pc, #48]	; (8000450 <__libc_init_array+0x44>)
 8000420:	f000 f818 	bl	8000454 <_init>
 8000424:	1b64      	subs	r4, r4, r5
 8000426:	10a4      	asrs	r4, r4, #2
 8000428:	2600      	movs	r6, #0
 800042a:	42a6      	cmp	r6, r4
 800042c:	d105      	bne.n	800043a <__libc_init_array+0x2e>
 800042e:	bd70      	pop	{r4, r5, r6, pc}
 8000430:	f855 3b04 	ldr.w	r3, [r5], #4
 8000434:	4798      	blx	r3
 8000436:	3601      	adds	r6, #1
 8000438:	e7ee      	b.n	8000418 <__libc_init_array+0xc>
 800043a:	f855 3b04 	ldr.w	r3, [r5], #4
 800043e:	4798      	blx	r3
 8000440:	3601      	adds	r6, #1
 8000442:	e7f2      	b.n	800042a <__libc_init_array+0x1e>
 8000444:	0800046c 	.word	0x0800046c
 8000448:	0800046c 	.word	0x0800046c
 800044c:	0800046c 	.word	0x0800046c
 8000450:	08000470 	.word	0x08000470

08000454 <_init>:
 8000454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000456:	bf00      	nop
 8000458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800045a:	bc08      	pop	{r3}
 800045c:	469e      	mov	lr, r3
 800045e:	4770      	bx	lr

08000460 <_fini>:
 8000460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000462:	bf00      	nop
 8000464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000466:	bc08      	pop	{r3}
 8000468:	469e      	mov	lr, r3
 800046a:	4770      	bx	lr
