/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

/*
 * Notes:
 *
 * (pg 294) Hardware interrupt selection:
 * 	To configure a line as interrupt source, use the following procedure:
 *		• Configure the corresponding mask bit in the EXTI_IMR register.
 *		• Configure the Trigger Selection bits of the Interrupt line (EXTI_RTSR and EXTI_FTSR)
 *		• Configure the enable and mask bits that control the NVIC IRQ channel mapped to the
 *		  EXTI so that an interrupt coming from one of the EXTI line can be correctly
 *		  acknowledged.
 */


/*
 Plan:

 Prep:
 - define overflow param

 - define interrupt program
 	 - TIM2_IRQHandler
 	 - check cause
 	 	 - if overflow (UIF flag), do x

 - enable interrupts
 	 - TIM2 overflow interrupt

 Program:
 - wait until interrupt is flagged

 */

#include <stdint.h>
#include "stm32f303xc.h"

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

// code from lecture example W05-C-interrupt by Dr Stewart Worrall
// initialise the discovery board I/O (just outputs: inputs are selected by default)
void initialise_board() {
	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
	*led_output_registers = 0x5555;
}

// code from lecture example W05-C-interrupt by Dr Stewart Worrall
// enable the clocks for desired peripherals (GPIOA, C and E)
void enable_clocks() {
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
}

/*
 * MUST FIND TIMER OVERFLOW INTERRUPT
 *
 * */

void enable_interrupt(){
	// disable other interrupts while initializing
	__disable_irq();
}

int main(void)
{

    /* Loop forever */
	for(;;);
}
