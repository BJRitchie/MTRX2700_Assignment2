
#include "timer.h"
#include "stm32f303xc.h"


// code from lecture example W05-C-interrupt by Dr Stewart Worrall
// enable the clocks for desired peripherals (GPIOA, C and E)
void enable_clocks() {
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
}

/* function to initialise the timer with interrupt at overflow
 * Inputs:
 * - int period: desired period between actions in milliseconds
 *
 * Outputs:
 * - None */
void TIM2_interrupt_init(uint32_t period)
{
	// disable other interrupts while initialising
	__disable_irq();

    // Enable TIM2 clock
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;

    // Configure TIM2
    TIM2->PSC = 8000 - 1; 			// Set prescaler, clock speed is now 1kHz
    TIM2->ARR = period; 			// Set auto-reload value
    TIM2->CR1 |= TIM_CR1_URS; 		// interrupt only flagged at over/underflow
    TIM2->DIER |= TIM_DIER_UIE; 	// Enable update interrupt
    NVIC_SetPriority(TIM2_IRQn, 1); // Set priority
    NVIC_EnableIRQ(TIM2_IRQn); 		// Enable TIM2 IRQ

    // Start TIM2
    TIM2->CR1 |= TIM_CR1_CEN;

	// Re-enable all interrupts (now that we are finished)
	__enable_irq();
}
